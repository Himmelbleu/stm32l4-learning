<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM32L431RxTx\STM32L431RxTx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM32L431RxTx\STM32L431RxTx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Apr 01 19:50:05 2023
<BR><P>
<H3>Maximum Stack Usage =       3464 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
pack_sha256_rsa2048_check &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[137]">LOS_StartToRun</a>
 <LI><a href="#[fb]">LOS_IntLock</a>
 <LI><a href="#[3a0]">LOS_IntUnLock</a>
 <LI><a href="#[fc]">LOS_IntRestore</a>
 <LI><a href="#[12e]">osTaskSchedule</a>
 <LI><a href="#[2]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[22f]">free_multi_option</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22f]">free_multi_option</a><BR>
 <LI><a href="#[2a8]">tlv_serialize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a8]">tlv_serialize</a><BR>
 <LI><a href="#[380]">prv_getLength</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[380]">prv_getLength</a><BR>
 <LI><a href="#[24f]">prv_serializeLinkData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24f]">prv_serializeLinkData</a><BR>
 <LI><a href="#[256]">lwm2m_data_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[256]">lwm2m_data_free</a><BR>
 <LI><a href="#[2a6]">tlv_parse</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a6]">tlv_parse</a><BR>
 <LI><a href="#[16a]">lwm2m_list_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16a]">lwm2m_list_free</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">PendSV_Handler</a> from los_dispatch_keil.o(.text) referenced 2 times from los_hwi.o(.data.vector)
 <LI><a href="#[0]">Reset_Handler</a> from los_startup_keil.o(RESET) referenced 2 times from los_hwi.o(.data.vector)
 <LI><a href="#[0]">Reset_Handler</a> from los_startup_keil.o(RESET) referenced from los_startup_keil.o(RESET)
 <LI><a href="#[19]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from los_startup_keil.o(RESET)
 <LI><a href="#[1a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from los_startup_keil.o(RESET)
 <LI><a href="#[1d]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[1e]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[1c]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[23]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[23]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[24]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[40]">app_data_report_collection</a> from agent_tiny_demo.o(i.app_data_report_collection) referenced from agent_tiny_demo.o(i.creat_collection_task)
 <LI><a href="#[13]">at_cmd</a> from at_main.o(i.at_cmd) referenced 2 times from at_main.o(.data)
 <LI><a href="#[18]">at_cmd_multi_suffix</a> from at_main.o(i.at_cmd_multi_suffix) referenced 2 times from at_main.o(.data)
 <LI><a href="#[17]">at_deinit</a> from at_main.o(i.at_deinit) referenced 2 times from at_main.o(.data)
 <LI><a href="#[15]">at_get_unuse_linkid</a> from at_main.o(i.at_get_unuse_linkid) referenced 2 times from at_main.o(.data)
 <LI><a href="#[12]">at_init</a> from at_main.o(i.at_init) referenced 2 times from at_main.o(.data)
 <LI><a href="#[29]">at_irq_handler</a> from at_hal.o(i.at_irq_handler) referenced from at_hal.o(i.at_usart_init)
 <LI><a href="#[16]">at_oob_register</a> from at_main.o(i.at_oob_register) referenced 2 times from at_main.o(.data)
 <LI><a href="#[41]">at_recv_task</a> from at_main.o(i.at_recv_task) referenced from at_main.o(i.create_at_recv_task)
 <LI><a href="#[14]">at_write</a> from at_main.o(i.at_write) referenced 2 times from at_main.o(.data)
 <LI><a href="#[2e]">atiny_clear_rpt_list</a> from atiny_rpt.o(i.atiny_clear_rpt_list) referenced from atiny_rpt.o(i.atiny_destroy_rpt)
 <LI><a href="#[2d]">atiny_clear_rpt_list_node_data</a> from atiny_rpt.o(i.atiny_clear_rpt_list_node_data) referenced from atiny_rpt.o(i.atiny_clear_rpt_data)
 <LI><a href="#[2d]">atiny_clear_rpt_list_node_data</a> from atiny_rpt.o(i.atiny_clear_rpt_list_node_data) referenced from atiny_rpt.o(i.atiny_clear_rpt_list)
 <LI><a href="#[2d]">atiny_clear_rpt_list_node_data</a> from atiny_rpt.o(i.atiny_clear_rpt_list_node_data) referenced from atiny_rpt.o(i.atiny_rm_rpt_uri)
 <LI><a href="#[2c]">atiny_connection_err_notify</a> from agenttiny.o(i.atiny_connection_err_notify) referenced from agenttiny.o(i.atiny_bind)
 <LI><a href="#[2b]">atiny_event_handle</a> from agenttiny.o(i.atiny_event_handle) referenced from agenttiny.o(i.atiny_bind)
 <LI><a href="#[30]">atiny_fota_downloaded_state_execute_update</a> from atiny_fota_state.o(i.atiny_fota_downloaded_state_execute_update) referenced from atiny_fota_state.o(i.atiny_fota_downloaded_state_init)
 <LI><a href="#[31]">atiny_fota_downloaded_state_recv_notify_ack</a> from atiny_fota_state.o(i.atiny_fota_downloaded_state_recv_notify_ack) referenced from atiny_fota_state.o(i.atiny_fota_downloaded_state_init)
 <LI><a href="#[32]">atiny_fota_downloading_state_finish_download</a> from atiny_fota_state.o(i.atiny_fota_downloading_state_finish_download) referenced from atiny_fota_state.o(i.atiny_fota_downloading_state_init)
 <LI><a href="#[33]">atiny_fota_downloading_state_recv_notify_ack</a> from atiny_fota_state.o(i.atiny_fota_downloading_state_recv_notify_ack) referenced from atiny_fota_state.o(i.atiny_fota_downloading_state_init)
 <LI><a href="#[35]">atiny_fota_idle_state_recv_notify_ack</a> from atiny_fota_state.o(i.atiny_fota_idle_state_recv_notify_ack) referenced from atiny_fota_state.o(i.atiny_fota_idle_state_init)
 <LI><a href="#[34]">atiny_fota_idle_state_report_result</a> from atiny_fota_state.o(i.atiny_fota_idle_state_report_result) referenced from atiny_fota_state.o(i.atiny_fota_idle_state_init)
 <LI><a href="#[38]">atiny_fota_manager_flag_read</a> from atiny_fota_manager.o(i.atiny_fota_manager_flag_read) referenced from atiny_fota_manager.o(i.atiny_fota_manager_set_storage_device)
 <LI><a href="#[39]">atiny_fota_manager_flag_write</a> from atiny_fota_manager.o(i.atiny_fota_manager_flag_write) referenced from atiny_fota_manager.o(i.atiny_fota_manager_set_storage_device)
 <LI><a href="#[36]">atiny_fota_manager_notify_ack_callback</a> from atiny_fota_manager.o(i.atiny_fota_manager_notify_ack_callback) referenced from atiny_fota_manager.o(i.atiny_fota_manager_get_data_cfg)
 <LI><a href="#[37]">atiny_fota_manager_update_notify</a> from atiny_fota_manager.o(i.atiny_fota_manager_update_notify) referenced from atiny_fota_manager.o(i.atiny_fota_manager_init)
 <LI><a href="#[2f]">atiny_fota_start_download</a> from atiny_fota_state.o(i.atiny_fota_start_download) referenced from atiny_fota_state.o(i.atiny_fota_downloaded_state_init)
 <LI><a href="#[2f]">atiny_fota_start_download</a> from atiny_fota_state.o(i.atiny_fota_start_download) referenced from atiny_fota_state.o(i.atiny_fota_idle_state_init)
 <LI><a href="#[3d]">atiny_fota_state_default_handle</a> from atiny_fota_state.o(i.atiny_fota_state_default_handle) referenced from atiny_fota_state.o(i.atiny_fota_state_init)
 <LI><a href="#[3b]">atiny_free</a> from atiny_osdep.o(i.atiny_free) referenced from atiny_fota_manager.o(i.atiny_fota_manager_set_storage_device)
 <LI><a href="#[3a]">atiny_malloc</a> from atiny_osdep.o(i.atiny_malloc) referenced from atiny_fota_manager.o(i.atiny_fota_manager_set_storage_device)
 <LI><a href="#[3e]">atiny_notify_stack_rpt_data_change</a> from atiny_rpt.o(i.atiny_notify_stack_rpt_data_change) referenced from atiny_rpt.o(i.atiny_step_rpt)
 <LI><a href="#[3c]">atiny_printf</a> from atiny_osdep.o(i.atiny_printf) referenced from atiny_fota_manager.o(i.atiny_fota_manager_set_storage_device)
 <LI><a href="#[3f]">atiny_task_entry</a> from user_task.o(i.atiny_task_entry) referenced from user_task.o(i.creat_agenttiny_task)
 <LI><a href="#[e]">calloc</a> from malloc.o(i.calloc) referenced 2 times from platform.o(.data)
 <LI><a href="#[6]">esp8266_bind</a> from esp8266.o(i.esp8266_bind) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[b]">esp8266_close</a> from esp8266.o(i.esp8266_close) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[42]">esp8266_cmd_match</a> from esp8266.o(i.esp8266_cmd_match) referenced from esp8266.o(i.esp8266_init)
 <LI><a href="#[7]">esp8266_connect</a> from esp8266.o(i.esp8266_connect) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[43]">esp8266_data_handler</a> from esp8266.o(i.esp8266_data_handler) referenced from esp8266.o(i.esp8266_init)
 <LI><a href="#[d]">esp8266_deinit</a> from esp8266.o(i.esp8266_deinit) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[5]">esp8266_get_localip</a> from esp8266.o(i.esp8266_get_localip) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[4]">esp8266_get_localmac</a> from esp8266.o(i.esp8266_get_localmac) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[3]">esp8266_init</a> from esp8266.o(i.esp8266_init) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[a]">esp8266_recv</a> from esp8266.o(i.esp8266_recv) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[c]">esp8266_recv_cb</a> from esp8266.o(i.esp8266_recv_cb) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[9]">esp8266_recv_timeout</a> from esp8266.o(i.esp8266_recv_timeout) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[8]">esp8266_send</a> from esp8266.o(i.esp8266_send) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[44]">firmware_download_reply</a> from firmware_update.o(i.firmware_download_reply) referenced from firmware_update.o(i.firmware_download_reply)
 <LI><a href="#[44]">firmware_download_reply</a> from firmware_update.o(i.firmware_download_reply) referenced from firmware_update.o(i.start_firmware_download)
 <LI><a href="#[22]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[22]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[f]">free</a> from malloc.o(i.free) referenced 2 times from platform.o(.data)
 <LI><a href="#[5b]">hal_read_flash</a> from ota_port.o(i.hal_read_flash) referenced from ota_port.o(i.hal_get_ota_opt)
 <LI><a href="#[5c]">hal_write_flash</a> from ota_port.o(i.hal_write_flash) referenced from ota_port.o(i.hal_get_ota_opt)
 <LI><a href="#[1f]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[66]">local_calloc</a> from package.o(i.local_calloc) referenced from package.o(i.pack_init_device)
 <LI><a href="#[1b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2a]">observe_handle_ack</a> from agenttiny.o(i.observe_handle_ack) referenced from agenttiny.o(i.atiny_bind)
 <LI><a href="#[1]">osHwiDefaultHandler</a> from los_hwi.o(i.osHwiDefaultHandler) referenced 16 times from los_hwi.o(.data.vector)
 <LI><a href="#[1]">osHwiDefaultHandler</a> from los_hwi.o(i.osHwiDefaultHandler) referenced from los_hwi.o(i.LOS_HwiCreate)
 <LI><a href="#[1]">osHwiDefaultHandler</a> from los_hwi.o(i.osHwiDefaultHandler) referenced from los_hwi.o(i.osHwiInit)
 <LI><a href="#[21]">osIdleTask</a> from los_task.o(i.osIdleTask) referenced from los_task.o(i.LOS_TaskCreateOnly)
 <LI><a href="#[21]">osIdleTask</a> from los_task.o(i.osIdleTask) referenced from los_task.o(i.osIdleTaskCreate)
 <LI><a href="#[20]">osInterrupt</a> from los_hwi.o(i.osInterrupt) referenced from los_hwi.o(i.LOS_HwiCreate)
 <LI><a href="#[20]">osInterrupt</a> from los_hwi.o(i.osInterrupt) referenced from los_hw_tick.o(i.osTickStart)
 <LI><a href="#[5d]">osSwTmrTask</a> from los_swtmr.o(i.osSwTmrTask) referenced from los_swtmr.o(i.osSwTmrTaskCreate)
 <LI><a href="#[61]">osTaskEntry</a> from los_task.o(i.osTaskEntry) referenced from los_hw.o(i.osTskStackInit)
 <LI><a href="#[60]">osTaskExit</a> from los_hw.o(i.osTaskExit) referenced from los_hw.o(i.osTskStackInit)
 <LI><a href="#[5e]">osTaskSwitchCheck</a> from los_task.o(i.osTaskSwitchCheck) referenced from los_task.o(i.osTaskMonInit)
 <LI><a href="#[5f]">osTickHandler</a> from los_tick.o(i.osTickHandler) referenced from los_hw_tick.o(i.osTickStart)
 <LI><a href="#[65]">pack_get_block_size</a> from package.o(i.pack_get_block_size) referenced from package.o(i.pack_init_device)
 <LI><a href="#[7d]">pack_head_handle_bin_type_tlv</a> from package_head.o(i.pack_head_handle_bin_type_tlv) referenced from package_head.o(.constdata)
 <LI><a href="#[7c]">pack_head_handle_checksum_tlv</a> from package_head.o(i.pack_head_handle_checksum_tlv) referenced from package_head.o(.constdata)
 <LI><a href="#[62]">pack_read_software</a> from package.o(i.pack_read_software) referenced from package.o(i.pack_init_device)
 <LI><a href="#[64]">pack_set_flash_type</a> from package.o(i.pack_set_flash_type) referenced from package.o(i.pack_init_device)
 <LI><a href="#[6c]">pack_sha256_check</a> from package_checksum.o(i.pack_sha256_check) referenced from package_checksum.o(i.pack_sha256_init)
 <LI><a href="#[6d]">pack_sha256_destroy</a> from package_checksum.o(i.pack_sha256_destroy) referenced from package_checksum.o(i.pack_sha256_init)
 <LI><a href="#[6a]">pack_sha256_reset</a> from package_checksum.o(i.pack_sha256_reset) referenced from package_checksum.o(i.pack_sha256_init)
 <LI><a href="#[6e]">pack_sha256_rsa2048_check</a> from package_checksum.o(i.pack_sha256_rsa2048_check) referenced from package_checksum.o(i.pack_sha256_rsa2048_init)
 <LI><a href="#[6b]">pack_sha256_update</a> from package_checksum.o(i.pack_sha256_update) referenced from package_checksum.o(i.pack_sha256_init)
 <LI><a href="#[69]">pack_storage_active_software</a> from package.o(i.pack_storage_active_software) referenced from package.o(i.pack_init_pack_device)
 <LI><a href="#[67]">pack_storage_write_software</a> from package.o(i.pack_storage_write_software) referenced from package.o(i.pack_init_pack_device)
 <LI><a href="#[68]">pack_storage_write_software_end</a> from package.o(i.pack_storage_write_software_end) referenced from package.o(i.pack_init_pack_device)
 <LI><a href="#[63]">pack_write_software</a> from package.o(i.pack_write_software) referenced from package.o(i.pack_init_device)
 <LI><a href="#[11]">printf</a> from printfa.o(i.__0printf) referenced 2 times from platform.o(.data)
 <LI><a href="#[27]">prv_create</a> from object_access_control.o(i.prv_create) referenced from object_access_control.o(i.acc_ctrl_create_object)
 <LI><a href="#[49]">prv_create</a> from object_binary_app_data_container.o(i.prv_create) referenced from object_binary_app_data_container.o(i.get_binary_app_data_object)
 <LI><a href="#[28]">prv_delete</a> from object_access_control.o(i.prv_delete) referenced from object_access_control.o(i.acc_ctrl_create_object)
 <LI><a href="#[4a]">prv_delete</a> from object_binary_app_data_container.o(i.prv_delete) referenced from object_binary_app_data_container.o(i.get_binary_app_data_object)
 <LI><a href="#[4d]">prv_device_discover</a> from object_device.o(i.prv_device_discover) referenced from object_device.o(i.get_object_device)
 <LI><a href="#[4f]">prv_device_execute</a> from object_device.o(i.prv_device_execute) referenced from object_device.o(i.get_object_device)
 <LI><a href="#[4c]">prv_device_read</a> from object_device.o(i.prv_device_read) referenced from object_device.o(i.get_object_device)
 <LI><a href="#[4e]">prv_device_write</a> from object_device.o(i.prv_device_write) referenced from object_device.o(i.get_object_device)
 <LI><a href="#[46]">prv_discover</a> from object_binary_app_data_container.o(i.prv_discover) referenced from object_binary_app_data_container.o(i.get_binary_app_data_object)
 <LI><a href="#[48]">prv_exec</a> from object_binary_app_data_container.o(i.prv_exec) referenced from object_binary_app_data_container.o(i.get_binary_app_data_object)
 <LI><a href="#[52]">prv_firmware_execute</a> from object_firmware.o(i.prv_firmware_execute) referenced from object_firmware.o(i.get_object_firmware)
 <LI><a href="#[50]">prv_firmware_read</a> from object_firmware.o(i.prv_firmware_read) referenced from object_firmware.o(i.get_object_firmware)
 <LI><a href="#[51]">prv_firmware_write</a> from object_firmware.o(i.prv_firmware_write) referenced from object_firmware.o(i.get_object_firmware)
 <LI><a href="#[71]">prv_handleDeregistrationReply</a> from registration.o(i.prv_handleDeregistrationReply) referenced from registration.o(i.registration_deregister)
 <LI><a href="#[6f]">prv_handleRegistrationReply</a> from registration.o(i.prv_handleRegistrationReply) referenced from registration.o(i.prv_register)
 <LI><a href="#[70]">prv_handleRegistrationUpdateReply</a> from registration.o(i.prv_handleRegistrationUpdateReply) referenced from registration.o(i.prv_updateRegistration)
 <LI><a href="#[53]">prv_location_read</a> from object_location.o(i.prv_location_read) referenced from object_location.o(i.get_object_location)
 <LI><a href="#[25]">prv_read</a> from object_access_control.o(i.prv_read) referenced from object_access_control.o(i.acc_ctrl_create_object)
 <LI><a href="#[45]">prv_read</a> from object_binary_app_data_container.o(i.prv_read) referenced from object_binary_app_data_container.o(i.get_binary_app_data_object)
 <LI><a href="#[4b]">prv_read</a> from object_connectivity_moni.o(i.prv_read) referenced from object_connectivity_moni.o(i.get_object_conn_m)
 <LI><a href="#[54]">prv_security_read</a> from object_security.o(i.prv_security_read) referenced from object_security.o(i.get_security_object)
 <LI><a href="#[58]">prv_server_create</a> from object_server.o(i.prv_server_create) referenced from object_server.o(i.get_server_object)
 <LI><a href="#[59]">prv_server_delete</a> from object_server.o(i.prv_server_delete) referenced from object_server.o(i.get_server_object)
 <LI><a href="#[56]">prv_server_discover</a> from object_server.o(i.prv_server_discover) referenced from object_server.o(i.get_server_object)
 <LI><a href="#[5a]">prv_server_execute</a> from object_server.o(i.prv_server_execute) referenced from object_server.o(i.get_server_object)
 <LI><a href="#[55]">prv_server_read</a> from object_server.o(i.prv_server_read) referenced from object_server.o(i.get_server_object)
 <LI><a href="#[57]">prv_server_write</a> from object_server.o(i.prv_server_write) referenced from object_server.o(i.get_server_object)
 <LI><a href="#[26]">prv_write</a> from object_access_control.o(i.prv_write) referenced from object_access_control.o(i.acc_ctrl_create_object)
 <LI><a href="#[47]">prv_write</a> from object_binary_app_data_container.o(i.prv_write) referenced from object_binary_app_data_container.o(i.get_binary_app_data_object)
 <LI><a href="#[78]">sha224_clone_wrap</a> from md_wrap.o(i.sha224_clone_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[76]">sha224_ctx_alloc</a> from md_wrap.o(i.sha224_ctx_alloc) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[77]">sha224_ctx_free</a> from md_wrap.o(i.sha224_ctx_free) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[74]">sha224_finish_wrap</a> from md_wrap.o(i.sha224_finish_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[79]">sha224_process_wrap</a> from md_wrap.o(i.sha224_process_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[72]">sha224_starts_wrap</a> from md_wrap.o(i.sha224_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[73]">sha224_update_wrap</a> from md_wrap.o(i.sha224_update_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[75]">sha224_wrap</a> from md_wrap.o(i.sha224_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[7a]">sha256_starts_wrap</a> from md_wrap.o(i.sha256_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[7b]">sha256_wrap</a> from md_wrap.o(i.sha256_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[10]">snprintf</a> from printfa.o(i.__0snprintf) referenced 2 times from platform.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_startup_keil.o(RESET))
<BR>[Address Reference Count : 2]<UL><LI> los_startup_keil.o(RESET)
<LI> los_hwi.o(.data.vector)
</UL>
<P><STRONG><a name="[1a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> los_startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[39a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry3.o(.ARM.Collect$$$$00000002))

<P><STRONG><a name="[7e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[39b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[39c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[39d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[39e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[39f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[137]"></a>LOS_StartToRun</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
</UL>

<P><STRONG><a name="[fb]"></a>LOS_IntLock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HwiCreate
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskNameGet
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osInterrupt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[3a0]"></a>LOS_IntUnLock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>LOS_IntRestore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HwiCreate
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskNameGet
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osInterrupt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[12e]"></a>osTaskSchedule</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[2]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> los_hwi.o(.data.vector)
</UL>
<P><STRONG><a name="[80]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_gettime
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_timestamp
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_intToText
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_current_time
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_current_time
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3a1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_stringToUri
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_output_buffer
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[1f]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[3a2]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_resp
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rng_generate_buffer
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSwitchCheck
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recv_timeout
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_localmac
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_localip
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_data_handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_serializeLinkData
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_serialize
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discover_serialize
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_serialize
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_textSerialize
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_setBuffer
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_block1_handler
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_add_multi_option
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_multi_option
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_array_option
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_parse_message
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_token
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getRegisterPayload
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_handleRequest
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_start_download
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_output_buffer
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_object
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_security_object
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_firmware_uri
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_fw_uri
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_write
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_read
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_end_not_aligned_block
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_begin_not_aligned
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_head_len
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_handle_checksum_tlv
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_resp_buf
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_oob_register
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_parse
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_setParameters
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_device_read
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_device_discover
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_dequeue_rpt_data
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_storage_device
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_device
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_int_report_result
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_discover
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_security_read
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_get_velocity
</UL>

<P><STRONG><a name="[231]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_intToText
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_merge_multi_option
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_multi_option_as_string
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
</UL>

<P><STRONG><a name="[2c8]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_strdup
</UL>

<P><STRONG><a name="[3a5]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTskStackInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3a6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskMonInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_init_forbidden
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zalloc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_handle_checksum_tlv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_calloc
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_ota_opt
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_show_dinfo
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_set_mux_mode
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recv_timeout
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_joinap
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_localmac
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_localip
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_close
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_choose_net_mode
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_bind
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetInit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getServers
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discover_serialize
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_parse_message
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_new
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init_message
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_send_notify
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getWatcher
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_readAttributes
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_value
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_create
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_add_rpt_uri
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_object
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_security_object
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_location
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_firmware
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_device
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_conn_m
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binary_app_data_object
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_destroy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_ctrl_create_object
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_uri_info
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_int_report_result
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_create
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_init
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_destroy
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_pack_device
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init_oob
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd
</UL>

<P><STRONG><a name="[3a8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[17e]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_localmac
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_localip
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_data_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_handle_resp
</UL>

<P><STRONG><a name="[228]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_strdup
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_conn_m
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_write
</UL>

<P><STRONG><a name="[369]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_firmware_uri
</UL>

<P><STRONG><a name="[187]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_transmit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_show_dinfo
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_set_mux_mode
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_joinap
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_close
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_choose_net_mode
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_bind
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_strdup
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_strdup
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_uri_path_segment
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getRegistrationQueryLength
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getRegisterPayloadBufferLength
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_read
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_object
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_security_object
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rpt_state
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_oob_register
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_timezone
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_UTC_offset
</UL>

<P><STRONG><a name="[266]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_data_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_cmd_match
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_checkFinished
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_uri_info
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_check
</UL>

<P><STRONG><a name="[245]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uri_decode
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_strncmp
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_parse_host_ip
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_firmware_uri
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_check_binding_valid
</UL>

<P><STRONG><a name="[246]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_parse_host_ip
</UL>

<P><STRONG><a name="[88]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_bind
</UL>

<P><STRONG><a name="[8a]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_textToFloat
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_floatToText
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReturnTemp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_step
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_floatToText
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_floatToText
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_textToFloat
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_floatToText
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReturnTemp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_textToFloat
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReturnTemp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_textToFloat
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_step
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_floatToText
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_float
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_res2tlv
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReturnTemp
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_step
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_floatToText
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[29b]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_float
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_res2tlv
</UL>

<P><STRONG><a name="[3a9]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_floatToText
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getLength
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_encodeFloat
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_readAttributes
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_step
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_textToFloat
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_floatToText
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getLength
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_encodeFloat
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_encodeFloat
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_setParameters
</UL>

<P><STRONG><a name="[3aa]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3ab]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3ac]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[89]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[1c]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[3ad]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[3ae]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[8e]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3af]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[3b0]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>E53_SC2_Read_Data</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, e53_sc2.o(i.E53_SC2_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = E53_SC2_Read_Data &rArr; MPU6050_ReturnTemp &rArr; MPU6050_ReadData &rArr; I2C_MPU6050_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReturnTemp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050ReadID
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050ReadAcc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_report_collection
</UL>

<P><STRONG><a name="[a4]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E53_SC2_Read_Data
</UL>

<P><STRONG><a name="[b3]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 258 bytes, Stack size 20 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[b4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 432 bytes, Stack size 20 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Light
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Gpio_Init
</UL>

<P><STRONG><a name="[f0]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_HalfWord
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Cmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Gpio_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_report_collection
</UL>

<P><STRONG><a name="[a5]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_init.o(i.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[14c]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[14d]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[a7]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_Error
</UL>

<P><STRONG><a name="[a9]"></a>HAL_I2C_Init</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[ab]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_ReadBuffer
</UL>

<P><STRONG><a name="[b0]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_WriteData
</UL>

<P><STRONG><a name="[a8]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[aa]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[b5]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[b8]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d8]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[ba]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b6]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[222]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_reboot
</UL>

<P><STRONG><a name="[155]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[151]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[154]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bd]"></a>HAL_QSPI_Command</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
</UL>

<P><STRONG><a name="[c0]"></a>HAL_QSPI_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_SetTimeout
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_config
</UL>

<P><STRONG><a name="[c1]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, hal_qspi_flash.o(i.HAL_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[c3]"></a>HAL_QSPI_Receive</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_QSPI_Receive &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Receive
</UL>

<P><STRONG><a name="[c2]"></a>HAL_QSPI_SetTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_SetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_QSPI_Transmit</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_QSPI_Transmit &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Transmit
</UL>

<P><STRONG><a name="[c5]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 896 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c7]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ca]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[c9]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[cb]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c8]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 252 bytes, Stack size 20 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[cc]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1676 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ce]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32l4xx_hal_rng.o(i.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RNG_GenerateRandomNumber &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rng_generate_buffer
</UL>

<P><STRONG><a name="[cf]"></a>HAL_SPI_Init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_WriteByte
</UL>

<P><STRONG><a name="[b9]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d3]"></a>HAL_UART_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_init
</UL>

<P><STRONG><a name="[d4]"></a>HAL_UART_MspInit</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_UART_Transmit</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_transmit
</UL>

<P><STRONG><a name="[db]"></a>HardWare_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, main.o(i.HardWare_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = HardWare_Init &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>I2C_MPU6050_ReadBuffer</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, e53_sc2.o(i.I2C_MPU6050_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2C_MPU6050_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_Error
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
</UL>

<P><STRONG><a name="[e8]"></a>I2C_MPU6050_WriteData</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, e53_sc2.o(i.I2C_MPU6050_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2C_MPU6050_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_Error
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteReg
</UL>

<P><STRONG><a name="[e9]"></a>Init_E53_SC2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, e53_sc2.o(i.Init_E53_SC2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Init_E53_SC2 &rArr; MPU6050_Init &rArr; Motion_Interrupt &rArr; MPU6050_WriteReg &rArr; I2C_MPU6050_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Light
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_report_collection
</UL>

<P><STRONG><a name="[ec]"></a>Init_Light</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, e53_sc2.o(i.Init_Light))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Init_Light &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_E53_SC2
</UL>

<P><STRONG><a name="[ed]"></a>LCD_Address_Set</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lcd.o(i.LCD_Address_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LCD_Address_Set &rArr; LCD_Write_Data &rArr; LCD_SPI_Send &rArr; SPI2_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[e1]"></a>LCD_Clear</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LCD_Clear &rArr; LCD_Address_Set &rArr; LCD_Write_Data &rArr; LCD_SPI_Send &rArr; SPI2_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_tiny_entry
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[e0]"></a>LCD_Init</STRONG> (Thumb, 410 bytes, Stack size 8 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = LCD_Init &rArr; LCD_Clear &rArr; LCD_Address_Set &rArr; LCD_Write_Data &rArr; LCD_SPI_Send &rArr; SPI2_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10ms
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Cmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[f6]"></a>LCD_ShowChar</STRONG> (Thumb, 502 bytes, Stack size 48 bytes, lcd.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LCD_ShowChar &rArr; LCD_Address_Set &rArr; LCD_Write_Data &rArr; LCD_SPI_Send &rArr; SPI2_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_HalfWord
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[e2]"></a>LCD_ShowString</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lcd.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Address_Set &rArr; LCD_Write_Data &rArr; LCD_SPI_Send &rArr; SPI2_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_tiny_entry
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[f7]"></a>LCD_Write_HalfWord</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd.o(i.LCD_Write_HalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_Write_HalfWord &rArr; LCD_SPI_Send &rArr; SPI2_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[13c]"></a>LOS_Align</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, los_misc.o(i.LOS_Align))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[f8]"></a>LOS_BinarySemCreate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, los_sem.o(i.LOS_BinarySemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LOS_BinarySemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_create
</UL>

<P><STRONG><a name="[119]"></a>LOS_ErrHandle</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, los_err.o(i.LOS_ErrHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LOS_ErrHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
</UL>

<P><STRONG><a name="[fa]"></a>LOS_HwiCreate</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, los_hwi.o(i.LOS_HwiCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_HwiCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_init
</UL>

<P><STRONG><a name="[fd]"></a>LOS_KernelInit</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, los_init.o(i.LOS_KernelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = LOS_KernelInit &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskMonInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHwiInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRegister
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>LOS_MemAlloc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, los_memory.o(i.LOS_MemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[10e]"></a>LOS_MemAllocAlign</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, los_memory.o(i.LOS_MemAllocAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAllocAlign
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[110]"></a>LOS_MemFree</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, los_memory.o(i.LOS_MemFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[113]"></a>LOS_MemInit</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, los_memory.o(i.LOS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = LOS_MemInit &rArr; osSlabMemInit &rArr; osSlabAllocatorNew &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
</UL>

<P><STRONG><a name="[116]"></a>LOS_MuxCreate</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, los_mux.o(i.LOS_MuxCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_MuxCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
</UL>

<P><STRONG><a name="[11a]"></a>LOS_MuxDelete</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, los_mux.o(i.LOS_MuxDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_MuxDelete &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
</UL>

<P><STRONG><a name="[11c]"></a>LOS_MuxPend</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, los_mux.o(i.LOS_MuxPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LOS_MuxPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_queue_wait_time
</UL>

<P><STRONG><a name="[121]"></a>LOS_MuxPost</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, los_mux.o(i.LOS_MuxPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = LOS_MuxPost &rArr; osTaskWake &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_node
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_queue_wait_time
</UL>

<P><STRONG><a name="[123]"></a>LOS_QueueCreate</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, los_queue.o(i.LOS_QueueCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = LOS_QueueCreate &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_bind
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
</UL>

<P><STRONG><a name="[126]"></a>LOS_QueueDelete</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, los_queue.o(i.LOS_QueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = LOS_QueueDelete &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_close
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
</UL>

<P><STRONG><a name="[128]"></a>LOS_QueueReadCopy</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, los_queue.o(i.LOS_QueueReadCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueReadParameterCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recv_timeout
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_close
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
</UL>

<P><STRONG><a name="[12b]"></a>LOS_QueueWriteCopy</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, los_queue.o(i.LOS_QueueWriteCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWriteParameterCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_at_task_msg
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_irq_handler
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_data_handler
</UL>

<P><STRONG><a name="[120]"></a>LOS_Schedule</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, los_hw.o(i.LOS_Schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
</UL>

<P><STRONG><a name="[12f]"></a>LOS_SemCreate</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, los_sem.o(i.LOS_SemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LOS_SemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
</UL>

<P><STRONG><a name="[130]"></a>LOS_SemDelete</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, los_sem.o(i.LOS_SemDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_SemDelete &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_destroy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
</UL>

<P><STRONG><a name="[133]"></a>LOS_SemPend</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, los_sem.o(i.LOS_SemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
</UL>

<P><STRONG><a name="[134]"></a>LOS_SemPost</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, los_sem.o(i.LOS_SemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_SemPost &rArr; osTaskWake &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_unlock
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_handle_resp
</UL>

<P><STRONG><a name="[135]"></a>LOS_Start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, los_init.o(i.LOS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_Start &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickStart
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_StartToRun
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>LOS_TaskCreate</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, los_task.o(i.LOS_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_agenttiny_task
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_collection_task
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_at_recv_task
</UL>

<P><STRONG><a name="[139]"></a>LOS_TaskCreateOnly</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, los_task.o(i.LOS_TaskCreateOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTskStackInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Align
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>

<P><STRONG><a name="[140]"></a>LOS_TaskDelay</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, los_task.o(i.LOS_TaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_delay
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_report_collection
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
</UL>

<P><STRONG><a name="[144]"></a>LOS_TaskDelete</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, los_task.o(i.LOS_TaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = LOS_TaskDelete &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
</UL>

<P><STRONG><a name="[146]"></a>LOS_TaskNameGet</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, los_task.o(i.LOS_TaskNameGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LOS_TaskNameGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
</UL>

<P><STRONG><a name="[141]"></a>LOS_TaskYield</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, los_task.o(i.LOS_TaskYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_TaskYield &rArr; osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueSize
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceCheck
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
</UL>

<P><STRONG><a name="[a6]"></a>LOS_TickCountGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_sys.o(i.LOS_TickCountGet))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
</UL>

<P><STRONG><a name="[a2]"></a>MPU6050ReadAcc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, e53_sc2.o(i.MPU6050ReadAcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MPU6050ReadAcc &rArr; MPU6050_ReadData &rArr; I2C_MPU6050_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E53_SC2_Read_Data
</UL>

<P><STRONG><a name="[a1]"></a>MPU6050ReadID</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, e53_sc2.o(i.MPU6050ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MPU6050ReadID &rArr; MPU6050_ReadData &rArr; I2C_MPU6050_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E53_SC2_Read_Data
</UL>

<P><STRONG><a name="[eb]"></a>MPU6050_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, e53_sc2.o(i.MPU6050_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MPU6050_Init &rArr; Motion_Interrupt &rArr; MPU6050_WriteReg &rArr; I2C_MPU6050_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Interrupt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteReg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_E53_SC2
</UL>

<P><STRONG><a name="[148]"></a>MPU6050_ReadData</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, e53_sc2.o(i.MPU6050_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MPU6050_ReadData &rArr; I2C_MPU6050_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReturnTemp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050ReadID
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050ReadAcc
</UL>

<P><STRONG><a name="[a3]"></a>MPU6050_ReturnTemp</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, e53_sc2.o(i.MPU6050_ReturnTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MPU6050_ReturnTemp &rArr; MPU6050_ReadData &rArr; I2C_MPU6050_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E53_SC2_Read_Data
</UL>

<P><STRONG><a name="[149]"></a>MPU6050_WriteReg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, e53_sc2.o(i.MPU6050_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MPU6050_WriteReg &rArr; I2C_MPU6050_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Interrupt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[dd]"></a>MX_GPIO_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[ea]"></a>MX_I2C1_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_E53_SC2
</UL>

<P><STRONG><a name="[f4]"></a>MX_SPI2_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, spi.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Gpio_Init
</UL>

<P><STRONG><a name="[de]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[14a]"></a>Motion_Interrupt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, e53_sc2.o(i.Motion_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Motion_Interrupt &rArr; MPU6050_WriteReg &rArr; I2C_MPU6050_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[14e]"></a>QSPI_Receive</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_qspi_flash.o(i.QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QSPI_Receive &rArr; HAL_QSPI_Receive &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_read
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_wait_write_end
</UL>

<P><STRONG><a name="[14f]"></a>QSPI_Send_CMD</STRONG> (Thumb, 70 bytes, Stack size 88 bytes, hal_qspi_flash.o(i.QSPI_Send_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_read
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_erase_sector
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_page
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_enable
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_wait_write_end
</UL>

<P><STRONG><a name="[150]"></a>QSPI_Transmit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_qspi_flash.o(i.QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QSPI_Transmit &rArr; HAL_QSPI_Transmit &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_page
</UL>

<P><STRONG><a name="[f5]"></a>SPI2_WriteByte</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi.o(i.SPI2_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI2_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
</UL>

<P><STRONG><a name="[dc]"></a>SystemClock_Config</STRONG> (Thumb, 228 bytes, Stack size 184 bytes, sys_init.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[19]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> los_startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d7]"></a>UART_CheckIdleState</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d5]"></a>UART_SetConfig</STRONG> (Thumb, 1000 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[da]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[14b]"></a>_Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_init.o(i._Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_config
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[156]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b2]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[37c]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_output_buffer
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_exec
</UL>

<P><STRONG><a name="[3b3]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[3b4]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[158]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b5]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[e6]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_ota_opt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_write_flash
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_flash
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_check_flash_param
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_entry
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_resp
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSwitchCheck
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_localmac
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_localip
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_deinit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_data_handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_bind
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_Error
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHwiDefaultHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_report_collection
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_timeout_nodes
</UL>

<P><STRONG><a name="[3b6]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[11]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[159]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b7]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[263]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_show_dinfo
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_set_mux_mode
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_joinap
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_close
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_choose_net_mode
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_bind
</UL>

<P><STRONG><a name="[3b8]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[10]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[15a]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b9]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[25c]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[3ba]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3bb]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[15b]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3bc]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[3bd]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[3be]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[220]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_snprintf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
</UL>

<P><STRONG><a name="[3bf]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3c0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3c1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[161]"></a>acc_auth_operate</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, object_access_control.o(i.acc_auth_operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = acc_auth_operate &rArr; prv_pre_auth_check &rArr; prv_check_instance_auth &rArr; prv_get_acl_instance
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_pre_auth_check
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_post_action_check
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_get_srv_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_init_forbidden
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[166]"></a>acc_ctrl_create_object</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, object_access_control.o(i.acc_ctrl_create_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = acc_ctrl_create_object &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
</UL>

<P><STRONG><a name="[169]"></a>acl_ctrl_free_object</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object_access_control.o(i.acl_ctrl_free_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = acl_ctrl_free_object &rArr; lwm2m_list_free &rArr;  lwm2m_list_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
</UL>

<P><STRONG><a name="[16c]"></a>agent_tiny_entry</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, agent_tiny_demo.o(i.agent_tiny_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104 + Unknown Stack Size
<LI>Call Chain = agent_tiny_entry &rArr; atiny_bind &rArr; lwm2m_step &rArr; observe_step &rArr; observe_app_step &rArr; lwm2m_data_serialize &rArr; discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_collection_task
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_entry
</UL>

<P><STRONG><a name="[40]"></a>app_data_report_collection</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, agent_tiny_demo.o(i.app_data_report_collection))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = app_data_report_collection &rArr; E53_SC2_Read_Data &rArr; MPU6050_ReturnTemp &rArr; MPU6050_ReadData &rArr; I2C_MPU6050_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_E53_SC2
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E53_SC2_Read_Data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> agent_tiny_demo.o(i.creat_collection_task)
</UL>
<P><STRONG><a name="[217]"></a>at_api_bind</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, at_api.o(i.at_api_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_api_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_bind
</UL>

<P><STRONG><a name="[219]"></a>at_api_close</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at_api.o(i.at_api_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_api_close
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_close
</UL>

<P><STRONG><a name="[21b]"></a>at_api_connect</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, at_api.o(i.at_api_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_api_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
</UL>

<P><STRONG><a name="[21d]"></a>at_api_recv_timeout</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, at_api.o(i.at_api_recv_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at_api_recv_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_recv_timeout
</UL>

<P><STRONG><a name="[229]"></a>at_api_register</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at_api.o(i.at_api_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_api_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_entry
</UL>

<P><STRONG><a name="[21f]"></a>at_api_send</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, at_api.o(i.at_api_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = at_api_send
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_send
</UL>

<P><STRONG><a name="[13]"></a>at_cmd</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, at_main.o(i.at_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_cmd &rArr; at_cmd_multi_suffix &rArr; write_at_task_msg &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>at_cmd_multi_suffix</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, at_main.o(i.at_cmd_multi_suffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = at_cmd_multi_suffix &rArr; write_at_task_msg &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_at_task_msg
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_transmit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_listner_list_del
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_listener_list_add
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>at_deinit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, at_main.o(i.at_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = at_deinit &rArr; write_at_task_msg &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_at_task_msg
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_deinit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskNameGet
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init_oob
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(.data)
</UL>
<P><STRONG><a name="[179]"></a>at_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at_main.o(i.at_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = at_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recv_timeout
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_data_handler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_close
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_listner_list_destroy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_node
</UL>

<P><STRONG><a name="[183]"></a>at_get_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_main.o(i.at_get_config))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_resp
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_transmit
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_irq_handler
</UL>

<P><STRONG><a name="[171]"></a>at_get_time</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_main.o(i.at_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_resp
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_localmac
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_localip
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_deinit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_data_handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_bind
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_timeout_nodes
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_queue_wait_time
</UL>

<P><STRONG><a name="[15]"></a>at_get_unuse_linkid</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, at_main.o(i.at_get_unuse_linkid))
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>at_init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, at_main.o(i.at_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = at_init &rArr; create_at_recv_task &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_deinit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_at_recv_task
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init_oob
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(.data)
</UL>
<P><STRONG><a name="[178]"></a>at_init_oob</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_main.o(i.at_init_oob))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_init_oob
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
</UL>

<P><STRONG><a name="[29]"></a>at_irq_handler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, at_hal.o(i.at_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_irq_handler &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_config
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_hal.o(i.at_usart_init)
</UL>
<P><STRONG><a name="[172]"></a>at_listener_list_add</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at_main.o(i.at_listener_list_add))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
</UL>

<P><STRONG><a name="[174]"></a>at_listner_list_del</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, at_main.o(i.at_listner_list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_listner_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
</UL>

<P><STRONG><a name="[184]"></a>at_listner_list_destroy</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, at_main.o(i.at_listner_list_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = at_listner_list_destroy &rArr; at_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
</UL>

<P><STRONG><a name="[185]"></a>at_malloc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, at_main.o(i.at_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = at_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_data_handler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
</UL>

<P><STRONG><a name="[16]"></a>at_oob_register</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, at_main.o(i.at_oob_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_oob_register &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>at_recv_task</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, at_main.o(i.at_recv_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = at_recv_task &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_resp
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_cmd_matching
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_timeout_nodes
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_handle_resp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_queue_wait_time
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(i.create_at_recv_task)
</UL>
<P><STRONG><a name="[177]"></a>at_struct_deinit</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, at_main.o(i.at_struct_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = at_struct_deinit &rArr; LOS_QueueDelete &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_listner_list_destroy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
</UL>

<P><STRONG><a name="[180]"></a>at_struct_init</STRONG> (Thumb, 532 bytes, Stack size 24 bytes, at_main.o(i.at_struct_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = at_struct_init &rArr; LOS_QueueCreate &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
</UL>

<P><STRONG><a name="[173]"></a>at_transmit</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, at_hal.o(i.at_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
</UL>

<P><STRONG><a name="[176]"></a>at_usart_deinit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at_hal.o(i.at_usart_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
</UL>

<P><STRONG><a name="[181]"></a>at_usart_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, at_hal.o(i.at_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = at_usart_init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_config
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HwiCreate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_adapter
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
</UL>

<P><STRONG><a name="[14]"></a>at_write</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, at_main.o(i.at_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = at_write &rArr; write_at_task_msg &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_at_task_msg
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_transmit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_listner_list_del
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_listener_list_add
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(.data)
</UL>
<P><STRONG><a name="[18c]"></a>atiny_add_rpt_uri</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, atiny_rpt.o(i.atiny_add_rpt_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = atiny_add_rpt_uri &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_unlock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_list_insert_tail
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_list_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_find_rpt_list
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binary_app_data_object
</UL>

<P><STRONG><a name="[16f]"></a>atiny_bind</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, agenttiny.o(i.atiny_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072 + Unknown Stack Size
<LI>Call Chain = atiny_bind &rArr; lwm2m_step &rArr; observe_step &rArr; observe_app_step &rArr; lwm2m_data_serialize &rArr; discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_step
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_register_event_handler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_poll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_handle_reconnect
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_register_observe_ack_call_back
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_register_connection_err_notify
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_step_rpt
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_lwm2m_context
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_instance
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_check
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_tiny_entry
</UL>

<P><STRONG><a name="[1a2]"></a>atiny_clear_rpt_data</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, atiny_rpt.o(i.atiny_clear_rpt_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = atiny_clear_rpt_data &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_unlock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free_list
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_find_rpt_list
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_event_handle
</UL>

<P><STRONG><a name="[1a4]"></a>atiny_cmd_ioctl</STRONG> (Thumb, 458 bytes, Stack size 24 bytes, agent_tiny_cmd_ioctl.o(i.atiny_cmd_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = atiny_cmd_ioctl &rArr; atiny_update_psk &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_ota_opt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_write_app_write
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_update_psk
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_timezone
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_current_time
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_UTC_offset
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_velocity
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_timezone
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_timestamp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_speed
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_source_voltage
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_signal_strength
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_serial_number
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_radius
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_power_source
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_power_current
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_network_bearer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_model_number
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_memory_free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_manufacturer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_longitude
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_link_utilization
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_link_quality
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_latitude
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_firmware_ver
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_firmware_state
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_dev_err
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_current_time
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_cell_id
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_bind_mode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_baterry_level
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_altitude
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_UTC_offset
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_do_reset_dev_err
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_do_factory_reset
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_do_dev_reboot
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_res2tlv
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_value
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_device_write
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_device_execute
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_value
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_storage_device
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_check
</UL>

<P><STRONG><a name="[195]"></a>atiny_deinit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, agenttiny.o(i.atiny_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = atiny_deinit &rArr; atiny_mutex_lock &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
</UL>

<P><STRONG><a name="[1cb]"></a>atiny_delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, atiny_osdep.o(i.atiny_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = atiny_delay &rArr; LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_delay
</UL>

<P><STRONG><a name="[1cc]"></a>atiny_dequeue_rpt_data</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, atiny_rpt.o(i.atiny_dequeue_rpt_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = atiny_dequeue_rpt_data &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_unlock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_list_empty
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_list_delete
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read_data
</UL>

<P><STRONG><a name="[197]"></a>atiny_destroy</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, agenttiny.o(i.atiny_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = atiny_destroy &rArr; lwm2m_close &rArr; lwm2m_deregister &rArr; registration_deregister &rArr; transaction_send &rArr; lwm2m_buffer_send &rArr; atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_unlock
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_close
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_destroy
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_object_location
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_object_firmware
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_object_device
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_object_conn_m
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_binary_app_data_object
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_server_object
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_security_object
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_instance
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_destroy
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy_rpt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_ctrl_free_object
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
</UL>

<P><STRONG><a name="[1d7]"></a>atiny_destroy_rpt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, atiny_rpt.o(i.atiny_destroy_rpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = atiny_destroy_rpt &rArr; atiny_free_list &rArr; lwm2m_free &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_destroy
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free_list
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
</UL>

<P><STRONG><a name="[1a9]"></a>atiny_do_dev_reboot</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, agent_tiny_cmd_ioctl.o(i.atiny_do_dev_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = atiny_do_dev_reboot &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_reboot
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1aa]"></a>atiny_do_factory_reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, agent_tiny_cmd_ioctl.o(i.atiny_do_factory_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = atiny_do_factory_reset &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1b1]"></a>atiny_do_reset_dev_err</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_do_reset_dev_err))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[2b]"></a>atiny_event_handle</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, agenttiny.o(i.atiny_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = atiny_event_handle &rArr; atiny_clear_rpt_data &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_isUriOpaqueHandle
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_repot_result
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_instance
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_event_notify
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_clear_rpt_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> agenttiny.o(i.atiny_bind)
</UL>
<P><STRONG><a name="[1da]"></a>atiny_event_notify</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, agent_tiny_cmd_ioctl.o(i.atiny_event_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = atiny_event_notify &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_event_handle
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_state
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_init
</UL>

<P><STRONG><a name="[1e1]"></a>atiny_fota_downloaded_state_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, atiny_fota_state.o(i.atiny_fota_downloaded_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atiny_fota_downloaded_state_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_init
</UL>

<P><STRONG><a name="[1ec]"></a>atiny_fota_downloading_state_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, atiny_fota_state.o(i.atiny_fota_downloading_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atiny_fota_downloading_state_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_init
</UL>

<P><STRONG><a name="[1ef]"></a>atiny_fota_idle_state_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, atiny_fota_state.o(i.atiny_fota_idle_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atiny_fota_idle_state_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_state_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_init
</UL>

<P><STRONG><a name="[1f0]"></a>atiny_fota_idle_state_int_report_result</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, atiny_fota_state.o(i.atiny_fota_idle_state_int_report_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = atiny_fota_idle_state_int_report_result &rArr; atiny_fota_idle_state_get_result &rArr; flag_upgrade_get_result &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_write
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_read
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_get_result
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_storage_device
</UL>

<P><STRONG><a name="[1cf]"></a>atiny_fota_manager_destroy</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, atiny_fota_manager.o(i.atiny_fota_manager_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_destroy &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
</UL>

<P><STRONG><a name="[1f5]"></a>atiny_fota_manager_execute_update</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, atiny_fota_manager.o(i.atiny_fota_manager_execute_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_execute_update &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_execute
</UL>

<P><STRONG><a name="[1f6]"></a>atiny_fota_manager_finish_download</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, atiny_fota_manager.o(i.atiny_fota_manager_finish_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_finish_download &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_update_notify
</UL>

<P><STRONG><a name="[1f3]"></a>atiny_fota_manager_get_data_cfg</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, atiny_fota_manager.o(i.atiny_fota_manager_get_data_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_get_data_cfg &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_read
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_report_result
</UL>

<P><STRONG><a name="[37f]"></a>atiny_fota_manager_get_deliver_method</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, atiny_fota_manager.o(i.atiny_fota_manager_get_deliver_method))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_read
</UL>

<P><STRONG><a name="[198]"></a>atiny_fota_manager_get_instance</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, atiny_fota_manager.o(i.atiny_fota_manager_get_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = atiny_fota_manager_get_instance &rArr; atiny_fota_manager_init &rArr; atiny_event_notify &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_write
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_read
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_execute
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_event_handle
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_notify_ack_callback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_flag_write
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_flag_read
</UL>

<P><STRONG><a name="[1e7]"></a>atiny_fota_manager_get_lwm2m_context</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, atiny_fota_manager.o(i.atiny_fota_manager_get_lwm2m_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_get_lwm2m_context &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_report_result
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_recv_notify_ack
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_recv_notify_ack
</UL>

<P><STRONG><a name="[1e6]"></a>atiny_fota_manager_get_pkg_uri</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, atiny_fota_manager.o(i.atiny_fota_manager_get_pkg_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_get_pkg_uri &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_read
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_recv_notify_ack
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_recv_notify_ack
</UL>

<P><STRONG><a name="[1e4]"></a>atiny_fota_manager_get_rpt_state</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, atiny_fota_manager.o(i.atiny_fota_manager_get_rpt_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_get_rpt_state &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_read
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_recv_notify_ack
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloading_state_recv_notify_ack
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_recv_notify_ack
</UL>

<P><STRONG><a name="[1f8]"></a>atiny_fota_manager_get_state</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, atiny_fota_manager.o(i.atiny_fota_manager_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_get_state &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_state_default_handle
</UL>

<P><STRONG><a name="[1e5]"></a>atiny_fota_manager_get_storage_device</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, atiny_fota_manager.o(i.atiny_fota_manager_get_storage_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_get_storage_device &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_recv_notify_ack
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_recv_notify_ack
</UL>

<P><STRONG><a name="[1de]"></a>atiny_fota_manager_get_update_result</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, atiny_fota_manager.o(i.atiny_fota_manager_get_update_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_get_update_result &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_read
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_execute_update
</UL>

<P><STRONG><a name="[1f7]"></a>atiny_fota_manager_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, atiny_fota_manager.o(i.atiny_fota_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = atiny_fota_manager_init &rArr; atiny_event_notify &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_event_notify
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_firmware_update_notify
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_updating_state_init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloading_state_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_instance
</UL>

<P><STRONG><a name="[1db]"></a>atiny_fota_manager_repot_result</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, atiny_fota_manager.o(i.atiny_fota_manager_repot_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_repot_result &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_event_handle
</UL>

<P><STRONG><a name="[1e0]"></a>atiny_fota_manager_rpt_state</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, atiny_fota_manager.o(i.atiny_fota_manager_rpt_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_rpt_state &rArr; atiny_fota_manager_save_rpt_state &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_stringToUri
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_resource_value_changed
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_save_rpt_state
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_start_download
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_recv_notify_ack
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloading_state_finish_download
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_recv_notify_ack
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_execute_update
</UL>

<P><STRONG><a name="[1f2]"></a>atiny_fota_manager_save_rpt_state</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, atiny_fota_manager.o(i.atiny_fota_manager_save_rpt_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_save_rpt_state &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_report_result
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rpt_state
</UL>

<P><STRONG><a name="[199]"></a>atiny_fota_manager_set_lwm2m_context</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, atiny_fota_manager.o(i.atiny_fota_manager_set_lwm2m_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_set_lwm2m_context &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
</UL>

<P><STRONG><a name="[1e3]"></a>atiny_fota_manager_set_state</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, atiny_fota_manager.o(i.atiny_fota_manager_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_set_state &rArr; atiny_event_notify &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_event_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_recv_notify_ack
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloading_state_recv_notify_ack
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_recv_notify_ack
</UL>

<P><STRONG><a name="[1fe]"></a>atiny_fota_manager_set_storage_device</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, atiny_fota_manager.o(i.atiny_fota_manager_set_storage_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_set_storage_device &rArr; atiny_fota_idle_state_int_report_result &rArr; atiny_fota_idle_state_get_result &rArr; flag_upgrade_get_result &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_device
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_upgrade_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_int_report_result
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init
</UL>

<P><STRONG><a name="[1df]"></a>atiny_fota_manager_set_update_result</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, atiny_fota_manager.o(i.atiny_fota_manager_set_update_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_set_update_result &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_start_download
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_report_result
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_recv_notify_ack
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloading_state_recv_notify_ack
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloading_state_finish_download
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_recv_notify_ack
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_execute_update
</UL>

<P><STRONG><a name="[203]"></a>atiny_fota_manager_start_download</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, atiny_fota_manager.o(i.atiny_fota_manager_start_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_start_download &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_write
</UL>

<P><STRONG><a name="[37]"></a>atiny_fota_manager_update_notify</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, atiny_fota_manager.o(i.atiny_fota_manager_update_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_update_notify &rArr; atiny_fota_manager_finish_download &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_finish_download
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_fota_manager.o(i.atiny_fota_manager_init)
</UL>
<P><STRONG><a name="[1e2]"></a>atiny_fota_state_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, atiny_fota_state.o(i.atiny_fota_state_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_updating_state_init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloading_state_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_init
</UL>

<P><STRONG><a name="[1f9]"></a>atiny_fota_updating_state_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atiny_fota_state.o(i.atiny_fota_updating_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atiny_fota_updating_state_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_init
</UL>

<P><STRONG><a name="[3b]"></a>atiny_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atiny_osdep.o(i.atiny_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_close
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_bind
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_start_download
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_fota_manager.o(i.atiny_fota_manager_set_storage_device)
</UL>
<P><STRONG><a name="[1b4]"></a>atiny_get_UTC_offset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_UTC_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = atiny_get_UTC_offset &rArr; atiny_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_snprintf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1c3]"></a>atiny_get_altitude</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_altitude))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1ae]"></a>atiny_get_baterry_level</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_baterry_level))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1b8]"></a>atiny_get_bind_mode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_bind_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = atiny_get_bind_mode &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_snprintf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1bc]"></a>atiny_get_cell_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_cell_id))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1b2]"></a>atiny_get_current_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_current_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = atiny_get_current_time &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1b0]"></a>atiny_get_dev_err</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_dev_err))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1b9]"></a>atiny_get_firmware_state</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_firmware_state))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1a8]"></a>atiny_get_firmware_ver</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_firmware_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = atiny_get_firmware_ver &rArr; atiny_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1c1]"></a>atiny_get_latitude</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_latitude))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1bd]"></a>atiny_get_link_quality</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_link_quality))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1be]"></a>atiny_get_link_utilization</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_link_utilization))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[18d]"></a>atiny_get_log_level</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, atiny_log.o(i.atiny_get_log_level))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_poll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_handle_reconnect
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_connection_err_notify
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_connect_server
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_buffer_send
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_start_download
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_update_result
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_rpt_state
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_pkg_uri
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_data_cfg
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_execute_update
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_write
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read_data
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_exec
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_parse_host_ip
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_create
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_max_rpt_cnt
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_rm_rpt_uri
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_dequeue_rpt_data
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_add_rpt_uri
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_notify_stack_rpt_data_change
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binary_app_data_object
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_rpt
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_storage_device
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_lwm2m_context
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_repot_result
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_destroy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_clear_rpt_data
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_reconnect
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_firmware_uri
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_uri_info
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_fw_uri
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_download_reply
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_state_default_handle
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_start_download
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_report_result
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_recv_notify_ack
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_get_result
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloading_state_recv_notify_ack
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloading_state_finish_download
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_recv_notify_ack
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_execute_update
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_int_report_result
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_update_result
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_state
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_save_rpt_state
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rpt_state
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_storage_device
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_state
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_lwm2m_context
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_finish_download
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rcv_notify_ack
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_notify_ack_callback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_flag_write
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_flag_read
</UL>

<P><STRONG><a name="[18f]"></a>atiny_get_log_level_name</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, atiny_log.o(i.atiny_get_log_level_name))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_poll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_handle_reconnect
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_connection_err_notify
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_connect_server
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_buffer_send
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_start_download
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_update_result
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_rpt_state
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_pkg_uri
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_data_cfg
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_execute_update
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_write
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read_data
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_exec
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_parse_host_ip
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_create
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_max_rpt_cnt
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_rm_rpt_uri
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_dequeue_rpt_data
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_add_rpt_uri
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_notify_stack_rpt_data_change
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binary_app_data_object
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_rpt
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_storage_device
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_lwm2m_context
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_repot_result
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_destroy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_clear_rpt_data
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_reconnect
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_firmware_uri
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_uri_info
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_fw_uri
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_download_reply
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_state_default_handle
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_start_download
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_report_result
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_recv_notify_ack
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_get_result
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloading_state_recv_notify_ack
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloading_state_finish_download
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_recv_notify_ack
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_execute_update
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_int_report_result
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_update_result
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_state
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_save_rpt_state
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rpt_state
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_storage_device
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_state
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_lwm2m_context
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_finish_download
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rcv_notify_ack
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_notify_ack_callback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_flag_write
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_flag_read
</UL>

<P><STRONG><a name="[1c2]"></a>atiny_get_longitude</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_longitude))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1a5]"></a>atiny_get_manufacturer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_manufacturer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = atiny_get_manufacturer &rArr; atiny_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1af]"></a>atiny_get_memory_free</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_memory_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atiny_get_memory_free &rArr; atiny_random &rArr; hal_rng_generate_buffer &rArr; HAL_RNG_GenerateRandomNumber &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_random
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1a6]"></a>atiny_get_model_number</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_model_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = atiny_get_model_number &rArr; atiny_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1ba]"></a>atiny_get_network_bearer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_network_bearer))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1ad]"></a>atiny_get_power_current</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_power_current))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1ab]"></a>atiny_get_power_source</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_power_source))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1c4]"></a>atiny_get_radius</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_radius))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1a7]"></a>atiny_get_serial_number</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_serial_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = atiny_get_serial_number &rArr; atiny_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1bb]"></a>atiny_get_signal_strength</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_signal_strength))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1ac]"></a>atiny_get_source_voltage</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_source_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1c5]"></a>atiny_get_speed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_speed))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1c6]"></a>atiny_get_timestamp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = atiny_get_timestamp &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1b6]"></a>atiny_get_timezone</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_timezone))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = atiny_get_timezone &rArr; atiny_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_snprintf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1c7]"></a>atiny_get_velocity</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, agent_tiny_cmd_ioctl.o(i.atiny_get_velocity))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atiny_get_velocity &rArr; location_get_velocity &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_get_velocity
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[18e]"></a>atiny_gettime_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atiny_osdep.o(i.atiny_gettime_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_ota_opt
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_check_flash_param
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_gettime
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_poll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_handle_reconnect
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_connection_err_notify
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_connect_server
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_buffer_send
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_start_download
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_update_result
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_rpt_state
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_pkg_uri
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_data_cfg
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_execute_update
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_write
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read_data
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_exec
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_parse_host_ip
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_create
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_max_rpt_cnt
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_rm_rpt_uri
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_dequeue_rpt_data
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_add_rpt_uri
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_notify_stack_rpt_data_change
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binary_app_data_object
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_rpt
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_storage_device
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_lwm2m_context
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_repot_result
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_destroy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_clear_rpt_data
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_reconnect
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_firmware_uri
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_uri_info
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_fw_uri
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_download_reply
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_state_default_handle
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_start_download
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_report_result
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_recv_notify_ack
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_get_result
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloading_state_recv_notify_ack
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloading_state_finish_download
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_recv_notify_ack
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_execute_update
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_int_report_result
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_update_result
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_state
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_save_rpt_state
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rpt_state
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_storage_device
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_state
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_lwm2m_context
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_finish_download
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rcv_notify_ack
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_notify_ack_callback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_flag_write
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_flag_read
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_current_time
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_timestamp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_current_time
</UL>

<P><STRONG><a name="[16d]"></a>atiny_init</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, agenttiny.o(i.atiny_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = atiny_init &rArr; atiny_fota_manager_set_storage_device &rArr; atiny_fota_idle_state_int_report_result &rArr; atiny_fota_idle_state_get_result &rArr; flag_upgrade_get_result &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_check_bootstrap_init_param
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_create
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_rpt
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_storage_device
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_instance
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_tiny_entry
</UL>

<P><STRONG><a name="[196]"></a>atiny_init_objects</STRONG> (Thumb, 772 bytes, Stack size 48 bytes, agenttiny.o(i.atiny_init_objects))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = atiny_init_objects &rArr; get_binary_app_data_object &rArr; free_binary_app_data_object &rArr; free_binary_app_data_object_rpt &rArr; atiny_rm_rpt_uri &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_configure
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_create
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_object
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_security_object
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_location
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_firmware
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_device
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_conn_m
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binary_app_data_object
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_ctrl_create_object
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_bootstrap_sequence_state
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
</UL>

<P><STRONG><a name="[209]"></a>atiny_init_rpt</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, atiny_rpt.o(i.atiny_init_rpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = atiny_init_rpt &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_create
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_list_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init
</UL>

<P><STRONG><a name="[3a]"></a>atiny_malloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atiny_osdep.o(i.atiny_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_bind
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_strdup
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_start_download
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_fota_manager.o(i.atiny_fota_manager_set_storage_device)
</UL>
<P><STRONG><a name="[20b]"></a>atiny_mutex_create</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, atiny_osdep.o(i.atiny_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = atiny_mutex_create &rArr; LOS_BinarySemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_BinarySemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_rpt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init
</UL>

<P><STRONG><a name="[1ca]"></a>atiny_mutex_destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, atiny_osdep.o(i.atiny_mutex_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = atiny_mutex_destroy &rArr; LOS_SemDelete &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy_rpt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_deinit
</UL>

<P><STRONG><a name="[190]"></a>atiny_mutex_lock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, atiny_osdep.o(i.atiny_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = atiny_mutex_lock &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteObservedList
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_cancel
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getWatcher
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_clear
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_max_rpt_cnt
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_rm_rpt_uri
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_dequeue_rpt_data
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_add_rpt_uri
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_step_rpt
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_clear_rpt_data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_deinit
</UL>

<P><STRONG><a name="[194]"></a>atiny_mutex_unlock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, atiny_osdep.o(i.atiny_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = atiny_mutex_unlock &rArr; LOS_SemPost &rArr; osTaskWake &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteObservedList
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_cancel
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getWatcher
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_clear
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_max_rpt_cnt
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_rm_rpt_uri
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_dequeue_rpt_data
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_add_rpt_uri
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_step_rpt
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_clear_rpt_data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
</UL>

<P><STRONG><a name="[216]"></a>atiny_net_bind</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, atiny_socket.o(i.atiny_net_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_net_bind &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_api_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_create
</UL>

<P><STRONG><a name="[218]"></a>atiny_net_close</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, atiny_socket.o(i.atiny_net_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = atiny_net_close &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_api_close
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_free
</UL>

<P><STRONG><a name="[21a]"></a>atiny_net_connect</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, atiny_socket.o(i.atiny_net_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = atiny_net_connect &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_api_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_create
</UL>

<P><STRONG><a name="[21c]"></a>atiny_net_recv_timeout</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, atiny_socket.o(i.atiny_net_recv_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = atiny_net_recv_timeout &rArr; at_api_recv_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_api_recv_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_buffer_recv
</UL>

<P><STRONG><a name="[21e]"></a>atiny_net_send</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, atiny_socket.o(i.atiny_net_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_api_send
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_buffer_send
</UL>

<P><STRONG><a name="[3c]"></a>atiny_printf</STRONG> (Thumb, 68 bytes, Stack size 288 bytes, atiny_osdep.o(i.atiny_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_send
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_bind
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_poll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_handle_reconnect
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_connection_err_notify
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_connect_server
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_buffer_send
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_start_download
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_update_result
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_rpt_state
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_pkg_uri
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_data_cfg
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_execute_update
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_write
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read_data
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_exec
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_parse_host_ip
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_create
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_max_rpt_cnt
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_rm_rpt_uri
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_dequeue_rpt_data
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_add_rpt_uri
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_notify_stack_rpt_data_change
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binary_app_data_object
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_rpt
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_storage_device
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_lwm2m_context
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_repot_result
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_destroy
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_event_notify
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_clear_rpt_data
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_reconnect
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_firmware_uri
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_uri_info
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_fw_uri
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_download_reply
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_state_default_handle
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_start_download
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_report_result
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_recv_notify_ack
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_get_result
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloading_state_recv_notify_ack
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloading_state_finish_download
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_recv_notify_ack
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_execute_update
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_int_report_result
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_update_result
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_state
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_save_rpt_state
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rpt_state
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_storage_device
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_state
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_lwm2m_context
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_finish_download
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rcv_notify_ack
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_notify_ack_callback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_flag_write
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_flag_read
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_update_psk
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_bind_mode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_do_factory_reset
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_do_dev_reboot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_fota_manager.o(i.atiny_fota_manager_set_storage_device)
</UL>
<P><STRONG><a name="[205]"></a>atiny_random</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sys_init.o(i.atiny_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = atiny_random &rArr; hal_rng_generate_buffer &rArr; HAL_RNG_GenerateRandomNumber &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rng_generate_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_rand
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_memory_free
</UL>

<P><STRONG><a name="[1d9]"></a>atiny_reboot</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_init.o(i.atiny_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atiny_reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_do_dev_reboot
</UL>

<P><STRONG><a name="[1c9]"></a>atiny_reconnect</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, agenttiny.o(i.atiny_reconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_reconnect &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_connection_err_notify
</UL>

<P><STRONG><a name="[223]"></a>atiny_rm_rpt_uri</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, atiny_rpt.o(i.atiny_rm_rpt_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = atiny_rm_rpt_uri &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_unlock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_list_delete
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free_list
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_find_rpt_list
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_delete
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_binary_app_data_object_rpt
</UL>

<P><STRONG><a name="[1b5]"></a>atiny_set_UTC_offset</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, agent_tiny_cmd_ioctl.o(i.atiny_set_UTC_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = atiny_set_UTC_offset &rArr; atiny_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[20d]"></a>atiny_set_bootstrap_sequence_state</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, agenttiny.o(i.atiny_set_bootstrap_sequence_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = atiny_set_bootstrap_sequence_state &rArr; lwm2m_initBootStrap
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_initBootStrap
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
</UL>

<P><STRONG><a name="[1b3]"></a>atiny_set_current_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, agent_tiny_cmd_ioctl.o(i.atiny_set_current_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = atiny_set_current_time &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[225]"></a>atiny_set_max_rpt_cnt</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, atiny_rpt.o(i.atiny_set_max_rpt_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = atiny_set_max_rpt_cnt &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_unlock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_find_rpt_list
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binary_app_data_object_rpt_max_cnt
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binary_app_data_object
</UL>

<P><STRONG><a name="[1eb]"></a>atiny_set_reboot_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, agenttiny.o(i.atiny_set_reboot_flag))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_recv_notify_ack
</UL>

<P><STRONG><a name="[1b7]"></a>atiny_set_timezone</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, agent_tiny_cmd_ioctl.o(i.atiny_set_timezone))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = atiny_set_timezone &rArr; atiny_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[204]"></a>atiny_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, atiny_osdep.o(i.atiny_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = atiny_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_security_object
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_timezone
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_UTC_offset
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_timezone
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_serial_number
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_model_number
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_manufacturer
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_firmware_ver
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_bind_mode
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_UTC_offset
</UL>

<P><STRONG><a name="[19d]"></a>atiny_step_rpt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, atiny_rpt.o(i.atiny_step_rpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = atiny_step_rpt &rArr; atiny_mutex_lock &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_unlock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_visit_list
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
</UL>

<P><STRONG><a name="[227]"></a>atiny_strdup</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, atiny_osdep.o(i.atiny_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = atiny_strdup &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_create
</UL>

<P><STRONG><a name="[3f]"></a>atiny_task_entry</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, user_task.o(i.atiny_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = atiny_task_entry &rArr; agent_tiny_entry &rArr; atiny_bind &rArr; lwm2m_step &rArr; observe_step &rArr; observe_app_step &rArr; lwm2m_data_serialize &rArr; discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_ota
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_api_register
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_tiny_entry
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_task.o(i.creat_agenttiny_task)
</UL>
<P><STRONG><a name="[1c0]"></a>atiny_update_psk</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, agent_tiny_cmd_ioctl.o(i.atiny_update_psk))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = atiny_update_psk &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[1bf]"></a>atiny_write_app_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, agent_tiny_cmd_ioctl.o(i.atiny_write_app_write))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[273]"></a>calc_crc32</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, ota_crc.o(i.calc_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_upgrade_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_enable_hwpatch
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flag
</UL>

<P><STRONG><a name="[e]"></a>calloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, malloc.o(i.calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = calloc &rArr; zalloc &rArr; malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zalloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[1d0]"></a>clean_security_object</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, object_security.o(i.clean_security_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = clean_security_object &rArr; lwm2m_free &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_security_object
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
</UL>

<P><STRONG><a name="[1d1]"></a>clean_server_object</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, object_server.o(i.clean_server_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = clean_server_object &rArr; lwm2m_free &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
</UL>

<P><STRONG><a name="[18a]"></a>cloud_cmd_matching</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, at_main.o(i.cloud_cmd_matching))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cloud_cmd_matching
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
</UL>

<P><STRONG><a name="[22c]"></a>coap_add_multi_option</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, er-coap-13.o(i.coap_add_multi_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = coap_add_multi_option &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_uri_path_segment
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_uri_query
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_uri_path
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_parse_message
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_location_path
</UL>

<P><STRONG><a name="[22d]"></a>coap_block1_handler</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, block1.o(i.coap_block1_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = coap_block1_handler &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
</UL>

<P><STRONG><a name="[22e]"></a>coap_free_header</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, er-coap-13.o(i.coap_free_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = coap_free_header &rArr; free_multi_option &rArr;  free_multi_option (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_multi_option
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_free
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
</UL>

<P><STRONG><a name="[2b0]"></a>coap_get_header_block1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, er-coap-13.o(i.coap_get_header_block1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = coap_get_header_block1
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
</UL>

<P><STRONG><a name="[26c]"></a>coap_get_header_block2</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, er-coap-13.o(i.coap_get_header_block2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = coap_get_header_block2
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_download_reply
</UL>

<P><STRONG><a name="[323]"></a>coap_get_header_observe</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, er-coap-13.o(i.coap_get_header_observe))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_handleRequest
</UL>

<P><STRONG><a name="[36d]"></a>coap_get_header_token</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, er-coap-13.o(i.coap_get_header_token))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_checkFinished
</UL>

<P><STRONG><a name="[230]"></a>coap_get_multi_option_as_string</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, er-coap-13.o(i.coap_get_multi_option_as_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = coap_get_multi_option_as_string &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_handleRegistrationReply
</UL>

<P><STRONG><a name="[232]"></a>coap_init_message</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, er-coap-13.o(i.coap_init_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = coap_init_message
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_handleResponse
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_new
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_app_step
</UL>

<P><STRONG><a name="[234]"></a>coap_parse_message</STRONG> (Thumb, 854 bytes, Stack size 48 bytes, er-coap-13.o(i.coap_parse_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = coap_parse_message &rArr; coap_add_multi_option &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_add_multi_option
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_parse_int_option
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_merge_multi_option
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
</UL>

<P><STRONG><a name="[311]"></a>coap_serialize_get_size</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, er-coap-13.o(i.coap_serialize_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coap_serialize_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_send
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_send
</UL>

<P><STRONG><a name="[239]"></a>coap_serialize_message</STRONG> (Thumb, 750 bytes, Stack size 40 bytes, er-coap-13.o(i.coap_serialize_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = coap_serialize_message &rArr; coap_free_header &rArr; free_multi_option &rArr;  free_multi_option (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_multi_option
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_int_option
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_array_option
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_log_2
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_free_header
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_send
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_send
</UL>

<P><STRONG><a name="[2b1]"></a>coap_set_header_block1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, er-coap-13.o(i.coap_set_header_block1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = coap_set_header_block1
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
</UL>

<P><STRONG><a name="[26f]"></a>coap_set_header_block2</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, er-coap-13.o(i.coap_set_header_block2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = coap_set_header_block2
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_download_reply
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
</UL>

<P><STRONG><a name="[259]"></a>coap_set_header_content_type</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, er-coap-13.o(i.coap_set_header_content_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coap_set_header_content_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_register
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_send_transaction
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_app_step
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[23c]"></a>coap_set_header_location_path</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, er-coap-13.o(i.coap_set_header_location_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = coap_set_header_location_path &rArr; coap_add_multi_option &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_multi_option
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_add_multi_option
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[320]"></a>coap_set_header_observe</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, er-coap-13.o(i.coap_set_header_observe))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_send_transaction
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_app_step
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_handleRequest
</UL>

<P><STRONG><a name="[23d]"></a>coap_set_header_token</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, er-coap-13.o(i.coap_set_header_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = coap_set_header_token &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_new
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_app_step
</UL>

<P><STRONG><a name="[23e]"></a>coap_set_header_uri_path</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, er-coap-13.o(i.coap_set_header_uri_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = coap_set_header_uri_path &rArr; coap_add_multi_option &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_multi_option
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_add_multi_option
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_deregister
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_updateRegistration
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_register
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_download_reply
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
</UL>

<P><STRONG><a name="[23f]"></a>coap_set_header_uri_path_segment</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, er-coap-13.o(i.coap_set_header_uri_path_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = coap_set_header_uri_path_segment &rArr; coap_add_multi_option &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_add_multi_option
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_new
</UL>

<P><STRONG><a name="[240]"></a>coap_set_header_uri_query</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, er-coap-13.o(i.coap_set_header_uri_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = coap_set_header_uri_query &rArr; coap_add_multi_option &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_multi_option
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_add_multi_option
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_register
</UL>

<P><STRONG><a name="[25a]"></a>coap_set_payload</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, er-coap-13.o(i.coap_set_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coap_set_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_updateRegistration
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_register
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_send_transaction
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_app_step
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[289]"></a>coap_set_status_code</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, er-coap-13.o(i.coap_set_status_code))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_request
</UL>

<P><STRONG><a name="[242]"></a>connection_create</STRONG> (Thumb, 386 bytes, Stack size 64 bytes, connection.o(i.connection_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = connection_create &rArr; connection_parse_host_ip &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_connect
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_bind
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_strdup
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_parse_host_ip
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_connect_server
</UL>

<P><STRONG><a name="[244]"></a>connection_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, connection.o(i.connection_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = connection_free &rArr; atiny_net_close &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_close
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_close_connection
</UL>

<P><STRONG><a name="[243]"></a>connection_parse_host_ip</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, connection.o(i.connection_parse_host_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = connection_parse_host_ip &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_create
</UL>

<P><STRONG><a name="[247]"></a>creat_agenttiny_task</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, user_task.o(i.creat_agenttiny_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = creat_agenttiny_task &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_work_tasks
</UL>

<P><STRONG><a name="[16e]"></a>creat_collection_task</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, agent_tiny_demo.o(i.creat_collection_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = creat_collection_task &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agent_tiny_entry
</UL>

<P><STRONG><a name="[182]"></a>create_at_recv_task</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, at_main.o(i.create_at_recv_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = create_at_recv_task &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
</UL>

<P><STRONG><a name="[248]"></a>create_work_tasks</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, user_task.o(i.create_work_tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = create_work_tasks &rArr; creat_agenttiny_task &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_agenttiny_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>delay10ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dwt.o(i.delay10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = delay10ms &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Gpio_Init
</UL>

<P><STRONG><a name="[249]"></a>delayus</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dwt.o(i.delayus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10ms
</UL>

<P><STRONG><a name="[24a]"></a>discover_serialize</STRONG> (Thumb, 758 bytes, Stack size 1168 bytes, discover.o(i.discover_serialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uri_toString
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_serializeLinkData
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_serializeAttributes
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_findAttributes
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_intToText
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_serialize
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_discover
</UL>

<P><STRONG><a name="[250]"></a>dm_handleRequest</STRONG> (Thumb, 870 bytes, Stack size 80 bytes, management.o(i.dm_handleRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = dm_handleRequest &rArr; object_read &rArr; lwm2m_data_serialize &rArr; discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_update_registration
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_serialize
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_convertMediaType
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_setParameters
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_handleRequest
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_write
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_readData
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_read
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_execute
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_discover
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_delete
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_payload
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_location_path
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_content_type
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_auth_operate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_readAttributes
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_isUriOpaqueHandle
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_request
</UL>

<P><STRONG><a name="[df]"></a>dwt_delay_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dwt.o(i.dwt_delay_init))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[6]"></a>esp8266_bind</STRONG> (Thumb, 228 bytes, Stack size 112 bytes, esp8266.o(i.esp8266_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = esp8266_bind &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_cmd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[265]"></a>esp8266_choose_net_mode</STRONG> (Thumb, 56 bytes, Stack size 80 bytes, esp8266.o(i.esp8266_choose_net_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = esp8266_choose_net_mode &rArr; esp8266_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_cmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[b]"></a>esp8266_close</STRONG> (Thumb, 178 bytes, Stack size 136 bytes, esp8266.o(i.esp8266_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = esp8266_close &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_cmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[264]"></a>esp8266_cmd</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, esp8266.o(i.esp8266_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = esp8266_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_show_dinfo
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_set_mux_mode
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reset
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_joinap
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_localmac
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_localip
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_echo_off
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_close
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_choose_net_mode
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_bind
</UL>

<P><STRONG><a name="[42]"></a>esp8266_cmd_match</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, esp8266.o(i.esp8266_cmd_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = esp8266_cmd_match &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(i.esp8266_init)
</UL>
<P><STRONG><a name="[7]"></a>esp8266_connect</STRONG> (Thumb, 348 bytes, Stack size 112 bytes, esp8266.o(i.esp8266_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = esp8266_connect &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_cmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>esp8266_data_handler</STRONG> (Thumb, 406 bytes, Stack size 104 bytes, esp8266.o(i.esp8266_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = esp8266_data_handler &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(i.esp8266_init)
</UL>
<P><STRONG><a name="[d]"></a>esp8266_deinit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, esp8266.o(i.esp8266_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = esp8266_deinit &rArr; esp8266_close &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_close
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[267]"></a>esp8266_echo_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, esp8266.o(i.esp8266_echo_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = esp8266_echo_off &rArr; esp8266_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[5]"></a>esp8266_get_localip</STRONG> (Thumb, 222 bytes, Stack size 552 bytes, esp8266.o(i.esp8266_get_localip))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = esp8266_get_localip &rArr; esp8266_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_cmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>esp8266_get_localmac</STRONG> (Thumb, 118 bytes, Stack size 544 bytes, esp8266.o(i.esp8266_get_localmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = esp8266_get_localmac &rArr; esp8266_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_cmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>esp8266_init</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, esp8266.o(i.esp8266_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = esp8266_init &rArr; esp8266_get_localip &rArr; esp8266_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_show_dinfo
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_set_mux_mode
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reset
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_joinap
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_localmac
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_localip
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_echo_off
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_choose_net_mode
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[26a]"></a>esp8266_joinap</STRONG> (Thumb, 60 bytes, Stack size 88 bytes, esp8266.o(i.esp8266_joinap))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = esp8266_joinap &rArr; esp8266_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_cmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[a]"></a>esp8266_recv</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, esp8266.o(i.esp8266_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = esp8266_recv &rArr; esp8266_recv_timeout &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recv_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>esp8266_recv_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_recv_cb))
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>esp8266_recv_timeout</STRONG> (Thumb, 106 bytes, Stack size 96 bytes, esp8266.o(i.esp8266_recv_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = esp8266_recv_timeout &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[268]"></a>esp8266_reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, esp8266.o(i.esp8266_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = esp8266_reset &rArr; esp8266_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[8]"></a>esp8266_send</STRONG> (Thumb, 124 bytes, Stack size 104 bytes, esp8266.o(i.esp8266_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = esp8266_send &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[26b]"></a>esp8266_set_mux_mode</STRONG> (Thumb, 56 bytes, Stack size 80 bytes, esp8266.o(i.esp8266_set_mux_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = esp8266_set_mux_mode &rArr; esp8266_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_cmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[269]"></a>esp8266_show_dinfo</STRONG> (Thumb, 56 bytes, Stack size 80 bytes, esp8266.o(i.esp8266_show_dinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = esp8266_show_dinfo &rArr; esp8266_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_cmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[272]"></a>flag_enable_hwpatch</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, recover_image.o(i.flag_enable_hwpatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc32
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set_recover_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_write_data
</UL>

<P><STRONG><a name="[1ff]"></a>flag_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, flag_manager.o(i.flag_init))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_storage_device
</UL>

<P><STRONG><a name="[1f1]"></a>flag_read</STRONG> (Thumb, 88 bytes, Stack size 528 bytes, flag_manager.o(i.flag_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = flag_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_upgrade_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_int_report_result
</UL>

<P><STRONG><a name="[275]"></a>flag_set_info</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, upgrade_flag.o(i.flag_set_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = flag_set_info &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_active_software
</UL>

<P><STRONG><a name="[274]"></a>flag_set_recover_verify</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, upgrade_flag.o(i.flag_set_recover_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_enable_hwpatch
</UL>

<P><STRONG><a name="[1ee]"></a>flag_upgrade_get_result</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, upgrade_flag.o(i.flag_upgrade_get_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = flag_upgrade_get_result &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_get_result
</UL>

<P><STRONG><a name="[200]"></a>flag_upgrade_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, upgrade_flag.o(i.flag_upgrade_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = flag_upgrade_init &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_read
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc32
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_storage_device
</UL>

<P><STRONG><a name="[1ea]"></a>flag_write</STRONG> (Thumb, 98 bytes, Stack size 528 bytes, flag_manager.o(i.flag_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_recv_notify_ack
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_int_report_result
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flag
</UL>

<P><STRONG><a name="[277]"></a>flash_adaptor_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_adaptor.o(i.flash_adaptor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = flash_adaptor_init &rArr; hal_spi_flash_config &rArr; HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_config
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_ota
</UL>

<P><STRONG><a name="[279]"></a>flash_adaptor_write</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, flash_adaptor.o(i.flash_adaptor_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = flash_adaptor_write &rArr; hal_spi_flash_erase_write &rArr; hal_spi_flash_write &rArr; prv_spi_flash_write_page &rArr; prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_read
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_erase_write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_write_flash
</UL>

<P><STRONG><a name="[22]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[f]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[1d6]"></a>free_binary_app_data_object</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, object_binary_app_data_container.o(i.free_binary_app_data_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = free_binary_app_data_object &rArr; free_binary_app_data_object_rpt &rArr; atiny_rm_rpt_uri &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_binary_app_data_object_rpt
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binary_app_data_object
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
</UL>

<P><STRONG><a name="[27e]"></a>free_block1_buffer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, block1.o(i.free_block1_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = free_block1_buffer &rArr; lwm2m_free &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteServer
</UL>

<P><STRONG><a name="[22f]"></a>free_multi_option</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, er-coap-13.o(i.free_multi_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = free_multi_option &rArr;  free_multi_option (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_multi_option
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_multi_option
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_uri_query
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_uri_path
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_free_header
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_location_path
</UL>

<P><STRONG><a name="[1d3]"></a>free_object_conn_m</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, object_connectivity_moni.o(i.free_object_conn_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = free_object_conn_m &rArr; lwm2m_list_free &rArr;  lwm2m_list_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
</UL>

<P><STRONG><a name="[1d2]"></a>free_object_device</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, object_device.o(i.free_object_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = free_object_device &rArr; lwm2m_list_free &rArr;  lwm2m_list_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
</UL>

<P><STRONG><a name="[1d4]"></a>free_object_firmware</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, object_firmware.o(i.free_object_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = free_object_firmware &rArr; lwm2m_free &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
</UL>

<P><STRONG><a name="[1d5]"></a>free_object_location</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, object_location.o(i.free_object_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = free_object_location &rArr; lwm2m_list_free &rArr;  lwm2m_list_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
</UL>

<P><STRONG><a name="[214]"></a>get_binary_app_data_object</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, object_binary_app_data_container.o(i.get_binary_app_data_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = get_binary_app_data_object &rArr; free_binary_app_data_object &rArr; free_binary_app_data_object_rpt &rArr; atiny_rm_rpt_uri &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resource_uri
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_max_rpt_cnt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_add_rpt_uri
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_binary_app_data_object
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
</UL>

<P><STRONG><a name="[211]"></a>get_object_conn_m</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, object_connectivity_moni.o(i.get_object_conn_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = get_object_conn_m &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_free
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
</UL>

<P><STRONG><a name="[210]"></a>get_object_device</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, object_device.o(i.get_object_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = get_object_device &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
</UL>

<P><STRONG><a name="[212]"></a>get_object_firmware</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, object_firmware.o(i.get_object_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = get_object_firmware &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
</UL>

<P><STRONG><a name="[213]"></a>get_object_location</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, object_location.o(i.get_object_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = get_object_location &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
</UL>

<P><STRONG><a name="[20e]"></a>get_security_object</STRONG> (Thumb, 568 bytes, Stack size 136 bytes, object_security.o(i.get_security_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = get_security_object &rArr; lwm2m_strdup &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_strdup
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_snprintf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_security_object
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
</UL>

<P><STRONG><a name="[20f]"></a>get_server_object</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, object_server.o(i.get_server_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = get_server_object &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_check_binding_valid
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
</UL>

<P><STRONG><a name="[1c8]"></a>hal_get_ota_opt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ota_port.o(i.hal_get_ota_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = hal_get_ota_opt &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>

<P><STRONG><a name="[22a]"></a>hal_init_ota</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ota_port.o(i.hal_init_ota))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = hal_init_ota &rArr; flash_adaptor_init &rArr; hal_spi_flash_config &rArr; HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_entry
</UL>

<P><STRONG><a name="[221]"></a>hal_rng_generate_buffer</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hal_rng.o(i.hal_rng_generate_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_rng_generate_buffer &rArr; HAL_RNG_GenerateRandomNumber &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_random
</UL>

<P><STRONG><a name="[278]"></a>hal_spi_flash_config</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hal_qspi_flash.o(i.hal_spi_flash_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = hal_spi_flash_config &rArr; HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_init
</UL>

<P><STRONG><a name="[282]"></a>hal_spi_flash_erase</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hal_qspi_flash.o(i.hal_spi_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hal_spi_flash_erase &rArr; prv_spi_flash_erase_sector &rArr; prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_erase_write
</UL>

<P><STRONG><a name="[27a]"></a>hal_spi_flash_erase_write</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, hal_qspi_flash.o(i.hal_spi_flash_erase_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = hal_spi_flash_erase_write &rArr; hal_spi_flash_write &rArr; prv_spi_flash_write_page &rArr; prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_write
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
</UL>

<P><STRONG><a name="[27b]"></a>hal_spi_flash_read</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, hal_qspi_flash.o(i.hal_spi_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hal_spi_flash_read &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_flash
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
</UL>

<P><STRONG><a name="[284]"></a>hal_spi_flash_write</STRONG> (Thumb, 466 bytes, Stack size 64 bytes, hal_qspi_flash.o(i.hal_spi_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = hal_spi_flash_write &rArr; prv_spi_flash_write_page &rArr; prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_page
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_erase_write
</UL>

<P><STRONG><a name="[206]"></a>location_get_velocity</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, agent_tiny_cmd_ioctl.o(i.location_get_velocity))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = location_get_velocity &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_velocity
</UL>

<P><STRONG><a name="[28d]"></a>lwm2m_buffer_recv</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, connection.o(i.lwm2m_buffer_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lwm2m_buffer_recv &rArr; atiny_net_recv_timeout &rArr; at_api_recv_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_recv_timeout
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_connection_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_poll
</UL>

<P><STRONG><a name="[28f]"></a>lwm2m_buffer_send</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, connection.o(i.lwm2m_buffer_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = lwm2m_buffer_send &rArr; atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_net_send
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_connection_stat
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_is_valid
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_send
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_send
</UL>

<P><STRONG><a name="[1d8]"></a>lwm2m_close</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, liblwm2m.o(i.lwm2m_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = lwm2m_close &rArr; lwm2m_deregister &rArr; registration_deregister &rArr; transaction_send &rArr; lwm2m_buffer_send &rArr; atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteTransactionList
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_deregister
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteServerList
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteObservedList
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
</UL>

<P><STRONG><a name="[295]"></a>lwm2m_close_connection</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, connection.o(i.lwm2m_close_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = lwm2m_close_connection &rArr; connection_free &rArr; atiny_net_close &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_step
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_reset
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteServer
</UL>

<P><STRONG><a name="[215]"></a>lwm2m_configure</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, liblwm2m.o(i.lwm2m_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = lwm2m_configure &rArr; lwm2m_strdup &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_isAltPathValid
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_strdup
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
</UL>

<P><STRONG><a name="[297]"></a>lwm2m_connect_server</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, connection.o(i.lwm2m_connect_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = lwm2m_connect_server &rArr; connection_create &rArr; connection_parse_host_ip &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_register
</UL>

<P><STRONG><a name="[31b]"></a>lwm2m_data_decode_bool</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, data.o(i.lwm2m_data_decode_bool))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getServers
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_write
</UL>

<P><STRONG><a name="[298]"></a>lwm2m_data_decode_float</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, data.o(i.lwm2m_data_decode_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lwm2m_data_decode_float &rArr; utils_textToFloat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_textToFloat
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_copyValue
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_handleRequest
</UL>

<P><STRONG><a name="[29c]"></a>lwm2m_data_decode_int</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, data.o(i.lwm2m_data_decode_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lwm2m_data_decode_int &rArr; utils_textToInt
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_textToInt
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_copyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getServers
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getMandatoryInfo
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_findServerInstance
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_handleRequest
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_device_write
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_write_resources
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_int_value
</UL>

<P><STRONG><a name="[385]"></a>lwm2m_data_encode_bool</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, data.o(i.lwm2m_data_encode_bool))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_get_value
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_get_value
</UL>

<P><STRONG><a name="[38c]"></a>lwm2m_data_encode_float</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, data.o(i.lwm2m_data_encode_float))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_res2tlv
</UL>

<P><STRONG><a name="[29e]"></a>lwm2m_data_encode_instances</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, data.o(i.lwm2m_data_encode_instances))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwm2m_data_encode_instances &rArr; lwm2m_data_include
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_include
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_value
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_value
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_tlv
</UL>

<P><STRONG><a name="[2bd]"></a>lwm2m_data_encode_int</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, data.o(i.lwm2m_data_encode_int))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_send_notify
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_read
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_value
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_value
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_tlv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_get_value
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_get_value
</UL>

<P><STRONG><a name="[2a0]"></a>lwm2m_data_encode_nstring</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, data.o(i.lwm2m_data_encode_nstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = lwm2m_data_encode_nstring &rArr; lwm2m_data_encode_opaque &rArr; prv_setBuffer &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_opaque
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_read
</UL>

<P><STRONG><a name="[2a1]"></a>lwm2m_data_encode_opaque</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, data.o(i.lwm2m_data_encode_opaque))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = lwm2m_data_encode_opaque &rArr; prv_setBuffer &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_setBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_parse
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_nstring
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_res2tlv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_get_value
</UL>

<P><STRONG><a name="[2a3]"></a>lwm2m_data_encode_string</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, data.o(i.lwm2m_data_encode_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = lwm2m_data_encode_string &rArr; prv_setBuffer &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_setBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_value
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_value
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_get_value
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_get_value
</UL>

<P><STRONG><a name="[256]"></a>lwm2m_data_free</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, data.o(i.lwm2m_data_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lwm2m_data_free &rArr;  lwm2m_data_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getServers
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_parse
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_parse
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_app_step
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_checkReadable
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_checkNumeric
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getMandatoryInfo
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_findServerInstance
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_write
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_read
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_discover
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[29f]"></a>lwm2m_data_include</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, data.o(i.lwm2m_data_include))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwm2m_data_include
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_instances
</UL>

<P><STRONG><a name="[2a4]"></a>lwm2m_data_new</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, data.o(i.lwm2m_data_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = lwm2m_data_new &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getServers
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_parse
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_parse
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_checkReadable
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_checkNumeric
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getMandatoryInfo
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_findServerInstance
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_readData
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_discover
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_location_read
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_firmware_read
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_value
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_device_read
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_device_discover
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_value
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_discover
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_tlv
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_read
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_discover
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_security_read
</UL>

<P><STRONG><a name="[2a5]"></a>lwm2m_data_parse</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, data.o(i.lwm2m_data_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = lwm2m_data_parse &rArr; tlv_parse &rArr;  tlv_parse (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_parse
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_setBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
</UL>

<P><STRONG><a name="[255]"></a>lwm2m_data_serialize</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, data.o(i.lwm2m_data_serialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + Unknown Stack Size
<LI>Call Chain = lwm2m_data_serialize &rArr; discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_serialize
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discover_serialize
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_textSerialize
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_app_step
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_send_notify
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_read
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[2a9]"></a>lwm2m_decode_TLV</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, tlv.o(i.lwm2m_decode_TLV))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwm2m_decode_TLV
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getDataType
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_parse
</UL>

<P><STRONG><a name="[2ab]"></a>lwm2m_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, platform_adapter.o(i.lwm2m_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = lwm2m_delay &rArr; atiny_delay &rArr; LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_delayBsRetry
</UL>

<P><STRONG><a name="[291]"></a>lwm2m_deregister</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, liblwm2m.o(i.lwm2m_deregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = lwm2m_deregister &rArr; registration_deregister &rArr; transaction_send &rArr; lwm2m_buffer_send &rArr; atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_deregister
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_close
</UL>

<P><STRONG><a name="[16b]"></a>lwm2m_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, platform_adapter.o(i.lwm2m_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = lwm2m_free &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_free
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getServers
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_free
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_close_connection
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_close
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteServer
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteObservedList
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_serialize
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_parse
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_textSerialize
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_block1_buffer
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_block1_handler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_multi_option
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_add_multi_option
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_updateRegistration
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_register
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_handleRegistrationReply
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uri_decode
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_request
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_send
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_new
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_send
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_cancel
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_app_step
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_send_notify
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getWatcher
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_clear
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_init_forbidden
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_readData
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_value
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_destroy_data_buf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_delete
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_delete
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_create
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_rm_rpt_uri
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_dequeue_rpt_data
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free_list
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_clear_rpt_list_node_data
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_object
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_location
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_firmware
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_device
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_conn_m
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binary_app_data_object
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_object_location
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_object_firmware
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_object_device
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_object_conn_m
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_binary_app_data_object
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_server_object
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_security_object
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_ctrl_free_object
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_uri_info
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_delete
</UL>

<P><STRONG><a name="[2b9]"></a>lwm2m_getBsCtrlStat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, liblwm2m.o(i.lwm2m_getBsCtrlStat))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_step
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_reconnect
</UL>

<P><STRONG><a name="[1e9]"></a>lwm2m_get_observe_info</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, observe.o(i.lwm2m_get_observe_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwm2m_get_observe_info
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_recv_notify_ack
</UL>

<P><STRONG><a name="[2ae]"></a>lwm2m_gettime</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, platform_adapter.o(i.lwm2m_gettime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = lwm2m_gettime &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_step
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_handleRegistrationUpdateReply
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_handleRegistrationReply
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_handleResponse
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_send
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_new
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_handleRequest
</UL>

<P><STRONG><a name="[2af]"></a>lwm2m_handle_packet</STRONG> (Thumb, 908 bytes, Stack size 88 bytes, packet.o(i.lwm2m_handle_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808 + Unknown Stack Size
<LI>Call Chain = lwm2m_handle_packet &rArr; handle_request &rArr; dm_handleRequest &rArr; object_read &rArr; lwm2m_data_serialize &rArr; discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_block1_handler
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_findServer
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_handleResponse
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_status_code
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_block2
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_block1
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_parse_message
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_header_block2
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_header_block1
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_free_header
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_reset
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_request
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_send
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_token
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init_message
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_payload
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_poll
</UL>

<P><STRONG><a name="[20c]"></a>lwm2m_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, liblwm2m.o(i.lwm2m_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = lwm2m_init &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_rand
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_objects
</UL>

<P><STRONG><a name="[224]"></a>lwm2m_initBootStrap</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, liblwm2m.o(i.lwm2m_initBootStrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwm2m_initBootStrap
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_initBsCtrlStat
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_bootstrap_sequence_state
</UL>

<P><STRONG><a name="[2b5]"></a>lwm2m_initBsCtrlStat</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, liblwm2m.o(i.lwm2m_initBsCtrlStat))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_initBootStrap
</UL>

<P><STRONG><a name="[2c1]"></a>lwm2m_isBsCtrlInServerInitiatedBs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, liblwm2m.o(i.lwm2m_isBsCtrlInServerInitiatedBs))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_setBsCtrlStat
</UL>

<P><STRONG><a name="[270]"></a>lwm2m_list_add</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, list.o(i.lwm2m_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwm2m_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_deregister
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getServers
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_configure
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_refreshServerList
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_updateRegistration
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_register
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_send_transaction
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_add_ac_val
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_object
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_security_object
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binary_app_data_object
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_download_reply
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_create
</UL>

<P><STRONG><a name="[163]"></a>lwm2m_list_find</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, list.o(i.lwm2m_list_find))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getServers
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_connect_server
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_checkReadable
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_checkNumeric
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_write
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_readData
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_execute
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_discover
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_delete
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_auth_operate
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_exec
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_write_resources
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_get_acl_instance
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_acc_self_auth_check
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_create
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_read
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_execute
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_security_read
</UL>

<P><STRONG><a name="[16a]"></a>lwm2m_list_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, list.o(i.lwm2m_list_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lwm2m_list_free &rArr;  lwm2m_list_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_free
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteObservedList
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_clear
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_write_resources
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_delete
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_conn_m
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_object_location
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_object_device
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_object_conn_m
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_binary_app_data_object
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_ctrl_free_object
</UL>

<P><STRONG><a name="[315]"></a>lwm2m_list_newId</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.lwm2m_list_newId))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
</UL>

<P><STRONG><a name="[375]"></a>lwm2m_list_remove</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, list.o(i.lwm2m_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwm2m_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_remove
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_delete
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_delete
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_delete
</UL>

<P><STRONG><a name="[167]"></a>lwm2m_malloc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, platform_adapter.o(i.lwm2m_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getServers
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_strdup
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_serialize
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discover_serialize
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_serialize
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_textSerialize
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_setBuffer
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_block1_handler
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_add_multi_option
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_multi_option_as_string
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_updateRegistration
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_register
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uri_decode
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_send
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_new
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_send
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getWatcher
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_init_forbidden
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_setParameters
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read_data
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_add_ac_val
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_create
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_add_rpt_uri
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_object
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_security_object
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_location
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_firmware
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_device
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_conn_m
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binary_app_data_object
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_ctrl_create_object
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_firmware_uri
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_fw_uri
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_create
</UL>

<P><STRONG><a name="[2ba]"></a>lwm2m_notify_even</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, liblwm2m.o(i.lwm2m_notify_even))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwm2m_notify_even
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_step
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_reconnect
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteObservedList
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_cancel
</UL>

<P><STRONG><a name="[2b4]"></a>lwm2m_rand</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, platform_adapter.o(i.lwm2m_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lwm2m_rand &rArr; atiny_random &rArr; hal_rng_generate_buffer &rArr; HAL_RNG_GenerateRandomNumber &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_random
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_init
</UL>

<P><STRONG><a name="[208]"></a>lwm2m_reconnect</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, liblwm2m.o(i.lwm2m_reconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = lwm2m_reconnect &rArr; lwm2m_reset_register &rArr; registration_reset &rArr; lwm2m_close_connection &rArr; connection_free &rArr; atiny_net_close &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteTransactionList
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_setBsCtrlStat
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_notify_even
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_getBsCtrlStat
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteObservedList
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_reset_register
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_handle_reconnect
</UL>

<P><STRONG><a name="[19c]"></a>lwm2m_register_connection_err_notify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, connection.o(i.lwm2m_register_connection_err_notify))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
</UL>

<P><STRONG><a name="[19b]"></a>lwm2m_register_event_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, liblwm2m.o(i.lwm2m_register_event_handler))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
</UL>

<P><STRONG><a name="[19a]"></a>lwm2m_register_observe_ack_call_back</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, observe.o(i.lwm2m_register_observe_ack_call_back))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
</UL>

<P><STRONG><a name="[1fd]"></a>lwm2m_resource_value_changed</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, observe.o(i.lwm2m_resource_value_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwm2m_resource_value_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_notify_stack_rpt_data_change
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rpt_state
</UL>

<P><STRONG><a name="[1f4]"></a>lwm2m_send_notify</STRONG> (Thumb, 214 bytes, Stack size 128 bytes, observe.o(i.lwm2m_send_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = lwm2m_send_notify &rArr; lwm2m_data_serialize &rArr; discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_serialize
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_int
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_get_registered_server
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_send_transaction
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_report_result
</UL>

<P><STRONG><a name="[321]"></a>lwm2m_session_is_equal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, connection.o(i.lwm2m_session_is_equal))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_findServer
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_handleResponse
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_cancel
</UL>

<P><STRONG><a name="[2b8]"></a>lwm2m_setBsCtrlStat</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, liblwm2m.o(i.lwm2m_setBsCtrlStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwm2m_setBsCtrlStat &rArr; lwm2m_setBsCtrlStatWithoutCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_isBsCtrlInServerInitiatedBs
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_isBoostrpEnable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_setBsCtrlStatWithoutCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_step
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_reconnect
</UL>

<P><STRONG><a name="[19f]"></a>lwm2m_step</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, liblwm2m.o(i.lwm2m_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032 + Unknown Stack Size
<LI>Call Chain = lwm2m_step &rArr; observe_step &rArr; observe_app_step &rArr; lwm2m_data_serialize &rArr; discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_step
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_step
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_start
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_getStatus
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_gettime
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_setBsCtrlStat
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_notify_even
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_getBsCtrlStat
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_refreshServerList
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_isBoostrpEnable
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_delayBsRetry
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
</UL>

<P><STRONG><a name="[27f]"></a>lwm2m_strdup</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, platform_adapter.o(i.lwm2m_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = lwm2m_strdup &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_configure
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_security_object
</UL>

<P><STRONG><a name="[1fc]"></a>lwm2m_stringToUri</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, uri.o(i.lwm2m_stringToUri))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwm2m_stringToUri &rArr; prv_parseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_parseNumber
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rpt_state
</UL>

<P><STRONG><a name="[2ca]"></a>lwm2m_strncmp</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, platform_adapter.o(i.lwm2m_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lwm2m_strncmp &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_readAttributes
</UL>

<P><STRONG><a name="[25d]"></a>lwm2m_update_registration</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, registration.o(i.lwm2m_update_registration))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = lwm2m_update_registration &rArr; object_getServers &rArr; prv_getMandatoryInfo &rArr; lwm2m_data_new &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getServers
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[1b]"></a>main</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = main &rArr; HardWare_Init &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_work_tasks
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2cc]"></a>malloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zalloc
</UL>

<P><STRONG><a name="[307]"></a>mbedtls_md_finish</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[2ce]"></a>mbedtls_md_free</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[301]"></a>mbedtls_md_get_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[300]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[302]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[303]"></a>mbedtls_md_setup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[305]"></a>mbedtls_md_starts</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[306]"></a>mbedtls_md_update</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_update
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[2d0]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, bignum.o(i.mbedtls_mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[2d3]"></a>mbedtls_mpi_add_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_add_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[2d4]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
</UL>

<P><STRONG><a name="[2d7]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[2d5]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[2d9]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 52 bytes, Stack size 28 bytes, bignum.o(i.mbedtls_mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[2da]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>

<P><STRONG><a name="[2d1]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>

<P><STRONG><a name="[2dc]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 980 bytes, Stack size 104 bytes, bignum.o(i.mbedtls_mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
</UL>

<P><STRONG><a name="[2e3]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 1380 bytes, Stack size 1664 bytes, bignum.o(i.mbedtls_mpi_exp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montg_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[2e8]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 82 bytes, Stack size 1048 bytes, bignum.o(i.mbedtls_mpi_fill_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[2db]"></a>mbedtls_mpi_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>

<P><STRONG><a name="[2eb]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 348 bytes, Stack size 72 bytes, bignum.o(i.mbedtls_mpi_gcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
</UL>

<P><STRONG><a name="[2d2]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>

<P><STRONG><a name="[2dd]"></a>mbedtls_mpi_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_init))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[2ed]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 816 bytes, Stack size 128 bytes, bignum.o(i.mbedtls_mpi_inv_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[2ec]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_lsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</UL>

<P><STRONG><a name="[2de]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_lset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>

<P><STRONG><a name="[2e5]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[2e2]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[2ee]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_mul_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
</UL>

<P><STRONG><a name="[2e9]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
</UL>

<P><STRONG><a name="[2f0]"></a>mbedtls_mpi_read_string</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_read_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbedtls_mpi_read_string &rArr; mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_get_digit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
</UL>

<P><STRONG><a name="[2df]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, bignum.o(i.mbedtls_mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[2e1]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[2f3]"></a>mbedtls_mpi_size</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
</UL>

<P><STRONG><a name="[2d6]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, bignum.o(i.mbedtls_mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[2f2]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_sub_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[2e0]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[2f5]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[359]"></a>mbedtls_platform_set_calloc_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, platform.o(i.mbedtls_platform_set_calloc_free))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_device
</UL>

<P><STRONG><a name="[2f6]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_rsa_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
</UL>

<P><STRONG><a name="[2f7]"></a>mbedtls_rsa_free</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_rsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
</UL>

<P><STRONG><a name="[2f8]"></a>mbedtls_rsa_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_set_padding
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
</UL>

<P><STRONG><a name="[2fa]"></a>mbedtls_rsa_pkcs1_verify</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_pkcs1_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3376<LI>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
</UL>

<P><STRONG><a name="[2fc]"></a>mbedtls_rsa_private</STRONG> (Thumb, 688 bytes, Stack size 144 bytes, rsa.o(i.mbedtls_rsa_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[2fe]"></a>mbedtls_rsa_public</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[2fb]"></a>mbedtls_rsa_rsassa_pss_verify</STRONG> (Thumb, 64 bytes, Stack size 80 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3320<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[2ff]"></a>mbedtls_rsa_rsassa_pss_verify_ext</STRONG> (Thumb, 506 bytes, Stack size 1136 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 3240<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
</UL>

<P><STRONG><a name="[2f9]"></a>mbedtls_rsa_set_padding</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rsa.o(i.mbedtls_rsa_set_padding))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>

<P><STRONG><a name="[308]"></a>mbedtls_sha256</STRONG> (Thumb, 54 bytes, Stack size 128 bytes, sha256.o(i.mbedtls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
</UL>

<P><STRONG><a name="[30e]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha256.o(i.mbedtls_sha256_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
</UL>

<P><STRONG><a name="[30c]"></a>mbedtls_sha256_finish</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, sha256.o(i.mbedtls_sha256_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_check
</UL>

<P><STRONG><a name="[30d]"></a>mbedtls_sha256_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha256.o(i.mbedtls_sha256_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha256_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_destroy
</UL>

<P><STRONG><a name="[309]"></a>mbedtls_sha256_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha256.o(i.mbedtls_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_reset
</UL>

<P><STRONG><a name="[310]"></a>mbedtls_sha256_process</STRONG> (Thumb, 3532 bytes, Stack size 312 bytes, sha256.o(i.mbedtls_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbedtls_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>

<P><STRONG><a name="[30a]"></a>mbedtls_sha256_starts</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_starts))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_reset
</UL>

<P><STRONG><a name="[30b]"></a>mbedtls_sha256_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sha256.o(i.mbedtls_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_update
</UL>

<P><STRONG><a name="[2b2]"></a>message_send</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, packet.o(i.message_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = message_send &rArr; lwm2m_buffer_send &rArr; atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_buffer
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_buffer_send
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_handleResponse
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_app_step
</UL>

<P><STRONG><a name="[313]"></a>object_checkNumeric</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, objects.o(i.object_checkNumeric))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = object_checkNumeric &rArr; lwm2m_data_new &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_setParameters
</UL>

<P><STRONG><a name="[314]"></a>object_checkReadable</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, objects.o(i.object_checkReadable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = object_checkReadable &rArr; lwm2m_data_new &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_setParameters
</UL>

<P><STRONG><a name="[25b]"></a>object_create</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, objects.o(i.object_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = object_create &rArr; lwm2m_data_parse &rArr; tlv_parse &rArr;  tlv_parse (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_newId
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_parse
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[262]"></a>object_delete</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, objects.o(i.object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = object_delete &rArr; observe_clear &rArr; lwm2m_list_free &rArr;  lwm2m_list_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[257]"></a>object_discover</STRONG> (Thumb, 294 bytes, Stack size 72 bytes, objects.o(i.object_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576 + Unknown Stack Size
<LI>Call Chain = object_discover &rArr; discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discover_serialize
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[25f]"></a>object_execute</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, objects.o(i.object_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = object_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[317]"></a>object_getRegisterPayload</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, objects.o(i.object_getRegisterPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = object_getRegisterPayload &rArr; prv_getObjectTemplate &rArr; utils_intToText &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_intToText
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_stringCopy
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getObjectTemplate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_updateRegistration
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_register
</UL>

<P><STRONG><a name="[31a]"></a>object_getRegisterPayloadBufferLength</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, objects.o(i.object_getRegisterPayloadBufferLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = object_getRegisterPayloadBufferLength &rArr; prv_getObjectTemplate &rArr; utils_intToText &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_intToText
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getObjectTemplate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_updateRegistration
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_register
</UL>

<P><STRONG><a name="[2cb]"></a>object_getServers</STRONG> (Thumb, 514 bytes, Stack size 64 bytes, objects.o(i.object_getServers))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = object_getServers &rArr; prv_getMandatoryInfo &rArr; lwm2m_data_new &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_int
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_bool
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getMandatoryInfo
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_findServerInstance
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_update_registration
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_refreshServerList
</UL>

<P><STRONG><a name="[258]"></a>object_read</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, objects.o(i.object_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600 + Unknown Stack Size
<LI>Call Chain = object_read &rArr; lwm2m_data_serialize &rArr; discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_serialize
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_readData
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[253]"></a>object_readData</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, objects.o(i.object_readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = object_readData &rArr; prv_init_forbidden &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_init_forbidden
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_app_step
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_read
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[25e]"></a>object_write</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, objects.o(i.object_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = object_write &rArr; lwm2m_data_parse &rArr; tlv_parse &rArr;  tlv_parse (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_parse
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[31f]"></a>observe_app_step</STRONG> (Thumb, 290 bytes, Stack size 200 bytes, observe.o(i.observe_app_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744 + Unknown Stack Size
<LI>Call Chain = observe_app_step &rArr; lwm2m_data_serialize &rArr; discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_serialize
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_send
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_token
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_observe
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init_message
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_send_transaction
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_readData
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_payload
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_content_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
</UL>

<P><STRONG><a name="[28b]"></a>observe_cancel</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, observe.o(i.observe_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = observe_cancel &rArr; atiny_mutex_lock &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_unlock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_notify_even
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_session_is_equal
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_unlinkObserved
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_reset
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_handleRequest
</UL>

<P><STRONG><a name="[316]"></a>observe_clear</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, observe.o(i.observe_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = observe_clear &rArr; lwm2m_list_free &rArr;  lwm2m_list_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_free
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_unlock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_unlinkObserved
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_delete
</UL>

<P><STRONG><a name="[37e]"></a>observe_findByUri</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, observe.o(i.observe_findByUri))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = observe_findByUri
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_findAttributes
</UL>

<P><STRONG><a name="[254]"></a>observe_handleRequest</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, observe.o(i.observe_handleRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = observe_handleRequest &rArr; lwm2m_data_decode_float &rArr; utils_textToFloat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_gettime
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_int
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_float
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_observe
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_header_observe
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_cancel
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getWatcher
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_findWatcher
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_findObserved
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_convertMediaType
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[2a]"></a>observe_handle_ack</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, agenttiny.o(i.observe_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = observe_handle_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> agenttiny.o(i.atiny_bind)
</UL>
<P><STRONG><a name="[2be]"></a>observe_send_transaction</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, observe.o(i.observe_send_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = observe_send_transaction &rArr; transaction_send &rArr; lwm2m_buffer_send &rArr; atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_send
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_new
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_observe
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_payload
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_content_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_step
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_app_step
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_send_notify
</UL>

<P><STRONG><a name="[261]"></a>observe_setParameters</STRONG> (Thumb, 474 bytes, Stack size 48 bytes, observe.o(i.observe_setParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = observe_setParameters &rArr; object_checkReadable &rArr; lwm2m_data_new &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getWatcher
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_checkReadable
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_checkNumeric
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[2c5]"></a>observe_step</STRONG> (Thumb, 1742 bytes, Stack size 256 bytes, observe.o(i.observe_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000 + Unknown Stack Size
<LI>Call Chain = observe_step &rArr; observe_app_step &rArr; lwm2m_data_serialize &rArr; discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_unlock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_serialize
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_int
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_float
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_send
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_token
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_observe
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init_message
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_send_transaction
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_app_step
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_readData
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_read
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_payload
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_content_type
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_step
</UL>

<P><STRONG><a name="[328]"></a>osAlarmHeapInfo</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, los_heap.o(i.osAlarmHeapInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapStatisticsGet
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>

<P><STRONG><a name="[335]"></a>osAtomicBitsetClearBit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, los_slab.o(i.osAtomicBitsetClearBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osAtomicBitsetClearBit
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[331]"></a>osAtomicBitsetFindClearAndSet</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, los_slab.o(i.osAtomicBitsetFindClearAndSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osAtomicBitsetFindClearAndSet
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorAlloc
</UL>

<P><STRONG><a name="[334]"></a>osAtomicBitsetGetBit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, los_slab.o(i.osAtomicBitsetGetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osAtomicBitsetGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[333]"></a>osAtomicBitsetGetNumBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_slab.o(i.osAtomicBitsetGetNumBits))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[32a]"></a>osAtomicBitsetInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, los_slab.o(i.osAtomicBitsetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osAtomicBitsetInit
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
</UL>

<P><STRONG><a name="[10d]"></a>osHeapAlloc</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, los_heap.o(i.osHeapAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapPrvGetNext
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAllocAlign
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
</UL>

<P><STRONG><a name="[10f]"></a>osHeapAllocAlign</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, los_heap.o(i.osHeapAllocAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
</UL>

<P><STRONG><a name="[112]"></a>osHeapFree</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, los_heap.o(i.osHeapFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = osHeapFree &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapPrvGetNext
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>

<P><STRONG><a name="[114]"></a>osHeapInit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, los_heap.o(i.osHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osHeapInit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[32b]"></a>osHeapPrvGetNext</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, los_heap.o(i.osHeapPrvGetNext))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>

<P><STRONG><a name="[329]"></a>osHeapStatisticsGet</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, los_heap.o(i.osHeapStatisticsGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osHeapStatisticsGet
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
</UL>

<P><STRONG><a name="[1]"></a>osHwiDefaultHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, los_hwi.o(i.osHwiDefaultHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osHwiDefaultHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 3]<UL><LI> los_hwi.o(.data.vector)
<LI> los_hwi.o(i.LOS_HwiCreate)
<LI> los_hwi.o(i.osHwiInit)
</UL>
<P><STRONG><a name="[100]"></a>osHwiInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, los_hwi.o(i.osHwiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osHwiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[21]"></a>osIdleTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, los_task.o(i.osIdleTask))
<BR>[Address Reference Count : 2]<UL><LI> los_task.o(i.LOS_TaskCreateOnly)
<LI> los_task.o(i.osIdleTaskCreate)
</UL>
<P><STRONG><a name="[108]"></a>osIdleTaskCreate</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, los_task.o(i.osIdleTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = osIdleTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[11d]"></a>osIntNumGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_hwi.o(i.osIntNumGet))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWriteParameterCheck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueReadParameterCheck
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHwiDefaultHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osInterrupt
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_destroy
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_create
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[20]"></a>osInterrupt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, los_hwi.o(i.osInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = osInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Address Reference Count : 2]<UL><LI> los_hw_tick.o(i.osTickStart)
<LI> los_hwi.o(i.LOS_HwiCreate)
</UL>
<P><STRONG><a name="[ff]"></a>osMemSystemInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, los_memory.o(i.osMemSystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = osMemSystemInit &rArr; LOS_MemInit &rArr; osSlabMemInit &rArr; osSlabAllocatorNew &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[104]"></a>osMuxInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, los_mux.o(i.osMuxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osMuxInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[142]"></a>osPriqueueDequeue</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, los_priqueue.o(i.osPriqueueDequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osPriqueueDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
</UL>

<P><STRONG><a name="[13a]"></a>osPriqueueEnqueue</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, los_priqueue.o(i.osPriqueueEnqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>

<P><STRONG><a name="[32d]"></a>osPriqueueInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, los_priqueue.o(i.osPriqueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osPriqueueInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[147]"></a>osPriqueueSize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, los_priqueue.o(i.osPriqueueSize))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>

<P><STRONG><a name="[12d]"></a>osPriqueueTop</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, los_priqueue.o(i.osPriqueueTop))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[105]"></a>osQueueInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, los_queue.o(i.osQueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osQueueInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[12a]"></a>osQueueOperate</STRONG> (Thumb, 374 bytes, Stack size 64 bytes, los_queue.o(i.osQueueOperate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
</UL>

<P><STRONG><a name="[13b]"></a>osSchedule</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, los_hw.o(i.osSchedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = osSchedule
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[f9]"></a>osSemCreate</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, los_sem.o(i.osSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_BinarySemCreate
</UL>

<P><STRONG><a name="[103]"></a>osSemInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, los_sem.o(i.osSemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osSemInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[330]"></a>osSlabAllocatorAlloc</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, los_slab.o(i.osSlabAllocatorAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSlabAllocatorAlloc &rArr; osAtomicBitsetFindClearAndSet
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetFindClearAndSet
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[332]"></a>osSlabAllocatorFree</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, los_slab.o(i.osSlabAllocatorFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetNumBits
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetBit
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetClearBit
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
</UL>

<P><STRONG><a name="[336]"></a>osSlabAllocatorNew</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, los_slab.o(i.osSlabAllocatorNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osSlabAllocatorNew &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetInit
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
</UL>

<P><STRONG><a name="[338]"></a>osSlabBlockHeadFill</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, los_slabmem.o(i.osSlabBlockHeadFill))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[337]"></a>osSlabCtrlHdrGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_memory.o(i.osSlabCtrlHdrGet))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[10c]"></a>osSlabMemAlloc</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, los_slabmem.o(i.osSlabMemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = osSlabMemAlloc &rArr; osSlabAllocatorAlloc &rArr; osAtomicBitsetFindClearAndSet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabBlockHeadFill
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorAlloc
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>

<P><STRONG><a name="[111]"></a>osSlabMemFree</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, los_slabmem.o(i.osSlabMemFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>

<P><STRONG><a name="[115]"></a>osSlabMemInit</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, los_slabmem.o(i.osSlabMemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = osSlabMemInit &rArr; osSlabAllocatorNew &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[106]"></a>osSwTmrInit</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, los_swtmr.o(i.osSwTmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[33c]"></a>osSwTmrStart</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, los_swtmr.o(i.osSwTmrStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSwTmrStart
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[5d]"></a>osSwTmrTask</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, los_swtmr.o(i.osSwTmrTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = osSwTmrTask &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_swtmr.o(i.osSwTmrTaskCreate)
</UL>
<P><STRONG><a name="[339]"></a>osSwTmrTaskCreate</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, los_swtmr.o(i.osSwTmrTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
</UL>

<P><STRONG><a name="[33d]"></a>osSwtmrScan</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, los_swtmr.o(i.osSwtmrScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[143]"></a>osTaskAdd2TimerList</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, los_task.o(i.osTaskAdd2TimerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
</UL>

<P><STRONG><a name="[61]"></a>osTaskEntry</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, los_task.o(i.osTaskEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = osTaskEntry &rArr; LOS_TaskDelete &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_hw.o(i.osTskStackInit)
</UL>
<P><STRONG><a name="[60]"></a>osTaskExit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_hw.o(i.osTaskExit))
<BR>[Address Reference Count : 1]<UL><LI> los_hw.o(i.osTskStackInit)
</UL>
<P><STRONG><a name="[101]"></a>osTaskInit</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, los_task.o(i.osTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = osTaskInit &rArr; osPriqueueInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[102]"></a>osTaskMonInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, los_task.o(i.osTaskMonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osTaskMonInit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[11e]"></a>osTaskPriModify</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, los_task.o(i.osTaskPriModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osTaskPriModify &rArr; osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
</UL>

<P><STRONG><a name="[33f]"></a>osTaskScan</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, los_task.o(i.osTaskScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = osTaskScan &rArr; osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[5e]"></a>osTaskSwitchCheck</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, los_task.o(i.osTaskSwitchCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osTaskSwitchCheck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_task.o(i.osTaskMonInit)
</UL>
<P><STRONG><a name="[11f]"></a>osTaskWait</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, los_task.o(i.osTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
</UL>

<P><STRONG><a name="[122]"></a>osTaskWake</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, los_task.o(i.osTaskWake))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osTaskWake &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
</UL>

<P><STRONG><a name="[5f]"></a>osTickHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, los_tick.o(i.osTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osTickHandler &rArr; osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceCheck
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_hw_tick.o(i.osTickStart)
</UL>
<P><STRONG><a name="[136]"></a>osTickStart</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, los_hw_tick.o(i.osTickStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osTickStart
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
</UL>

<P><STRONG><a name="[145]"></a>osTimerListDelete</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, los_task.o(i.osTimerListDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[340]"></a>osTimesliceCheck</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, los_timeslice.o(i.osTimesliceCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = osTimesliceCheck &rArr; LOS_TaskYield &rArr; osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[107]"></a>osTimesliceInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, los_timeslice.o(i.osTimesliceInit))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[13f]"></a>osTskStackInit</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, los_hw.o(i.osTskStackInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTskStackInit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[2b6]"></a>output_buffer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commandline.o(i.output_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_poll
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_send
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_send
</UL>

<P><STRONG><a name="[341]"></a>pack_checksum_check</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, package_checksum.o(i.pack_checksum_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pack_checksum_check &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_get_alg
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_check
</UL>

<P><STRONG><a name="[344]"></a>pack_checksum_create</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, package_checksum.o(i.pack_checksum_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pack_checksum_create &rArr; pack_checksum_init_head_data &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init_head_data
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_tlvs
</UL>

<P><STRONG><a name="[347]"></a>pack_checksum_delete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, package_checksum.o(i.pack_checksum_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pack_checksum_delete &rArr; pack_free &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_get_alg
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_tlvs
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_destroy
</UL>

<P><STRONG><a name="[34d]"></a>pack_checksum_update_data</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, package_checksum.o(i.pack_checksum_update_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pack_checksum_update_data &rArr; pack_checksum_restore_checksum &rArr; pack_malloc &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_restore_checksum
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init_head_data
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_get_alg
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_head_len
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software
</UL>

<P><STRONG><a name="[348]"></a>pack_free</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, package.o(i.pack_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pack_free &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_free_save_buffer
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_head_len
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_handle_checksum_tlv
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_delete
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_restore_checksum
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_destroy
</UL>

<P><STRONG><a name="[202]"></a>pack_get_device</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, package.o(i.pack_get_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_pack_device
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_storage_device
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_device
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_write_software
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_set_flash_type
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_read_software
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_block_size
</UL>

<P><STRONG><a name="[342]"></a>pack_get_params</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, package.o(i.pack_get_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_device
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write_stored_data
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_check
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_entire_blocks
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_end_not_aligned_block
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_begin_not_aligned
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_head_len
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_tlvs
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_handle_checksum_tlv
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_handle_bin_type_tlv
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_create
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_check
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_check
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_restore_checksum
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init_head_data
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_check
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_update_data
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_active_software
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_write_software
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software_end
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_set_flash_type
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_read_software
</UL>

<P><STRONG><a name="[34f]"></a>pack_head_check</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, package_head.o(i.pack_head_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pack_head_check &rArr; pack_checksum_check &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_is_done
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_check
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software_end
</UL>

<P><STRONG><a name="[351]"></a>pack_head_destroy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, package_head.o(i.pack_head_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pack_head_destroy &rArr; pack_checksum_delete &rArr; pack_free &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_delete
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software_end
</UL>

<P><STRONG><a name="[35e]"></a>pack_head_get_checksum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, package_head.o(i.pack_head_get_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software
</UL>

<P><STRONG><a name="[34b]"></a>pack_head_get_head_info</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, package_head.o(i.pack_head_get_head_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pack_head_get_head_info
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_is_done
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init_head_data
</UL>

<P><STRONG><a name="[34a]"></a>pack_head_get_head_len</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, package_head.o(i.pack_head_get_head_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pack_head_get_head_len
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_is_done
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init_head_data
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_update_data
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software
</UL>

<P><STRONG><a name="[35c]"></a>pack_head_get_key</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, package_head.o(i.pack_head_get_key))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
</UL>

<P><STRONG><a name="[352]"></a>pack_head_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, package_head.o(i.pack_head_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pack_head_init
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_pack_device
</UL>

<P><STRONG><a name="[353]"></a>pack_head_parse</STRONG> (Thumb, 406 bytes, Stack size 56 bytes, package_head.o(i.pack_head_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pack_head_parse &rArr; pack_head_parse_tlvs &rArr; pack_checksum_create &rArr; pack_checksum_init_head_data &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_head_len
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_tlvs
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software
</UL>

<P><STRONG><a name="[354]"></a>pack_head_parse_head_len</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, package_head.o(i.pack_head_parse_head_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pack_head_parse_head_len &rArr; pack_malloc &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse
</UL>

<P><STRONG><a name="[357]"></a>pack_head_set_head_info</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, package_head.o(i.pack_head_set_head_info))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_device
</UL>

<P><STRONG><a name="[201]"></a>pack_init_device</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, package.o(i.pack_init_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pack_init_device &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_set_device
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_set_head_info
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_storage_device
</UL>

<P><STRONG><a name="[28c]"></a>pack_malloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, package.o(i.pack_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pack_malloc &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_end_not_aligned_block
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_begin_not_aligned
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_head_len
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_handle_checksum_tlv
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_create
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_restore_checksum
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_calloc
</UL>

<P><STRONG><a name="[35b]"></a>pack_sha256_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, package_checksum.o(i.pack_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pack_sha256_init &rArr; pack_sha256_reset &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_init
</UL>

<P><STRONG><a name="[349]"></a>pack_sha256_rsa2048_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, package_checksum.o(i.pack_sha256_rsa2048_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pack_sha256_rsa2048_init &rArr; pack_sha256_init &rArr; pack_sha256_reset &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init
</UL>

<P><STRONG><a name="[69]"></a>pack_storage_active_software</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, package.o(i.pack_storage_active_software))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = pack_storage_active_software &rArr; flag_set_info &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_pack_device)
</UL>
<P><STRONG><a name="[363]"></a>pack_wr_check</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, package_writer.o(i.pack_wr_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pack_wr_check &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write
</UL>

<P><STRONG><a name="[360]"></a>pack_wr_destroy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, package_writer.o(i.pack_wr_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pack_wr_destroy &rArr; pack_wr_free_save_buffer &rArr; pack_free &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_free_save_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software_end
</UL>

<P><STRONG><a name="[364]"></a>pack_wr_free_save_buffer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, package_writer.o(i.pack_wr_free_save_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pack_wr_free_save_buffer &rArr; pack_free &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_destroy
</UL>

<P><STRONG><a name="[35a]"></a>pack_wr_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, package_writer.o(i.pack_wr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_pack_device
</UL>

<P><STRONG><a name="[358]"></a>pack_wr_set_device</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, package_writer.o(i.pack_wr_set_device))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_device
</UL>

<P><STRONG><a name="[35d]"></a>pack_wr_write</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, package_writer.o(i.pack_wr_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = pack_wr_write &rArr; pack_wr_entire_blocks &rArr; pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write_stored_data
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_check
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_entire_blocks
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_end_not_aligned_block
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_begin_not_aligned
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software
</UL>

<P><STRONG><a name="[35f]"></a>pack_wr_write_end</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, package_writer.o(i.pack_wr_write_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = pack_wr_write_end &rArr; pack_wr_write_stored_data &rArr; pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write_stored_data
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software_end
</UL>

<P><STRONG><a name="[367]"></a>pack_wr_write_stored_data</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, package_writer.o(i.pack_wr_write_stored_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = pack_wr_write_stored_data &rArr; pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_write_data
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write_end
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write
</UL>

<P><STRONG><a name="[368]"></a>parse_firmware_uri</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, firmware_update.o(i.parse_firmware_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = parse_firmware_uri &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
</UL>

<P><STRONG><a name="[294]"></a>prv_deleteTransactionList</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, liblwm2m.o(i.prv_deleteTransactionList))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = prv_deleteTransactionList &rArr; transaction_free &rArr; coap_free_header &rArr; free_multi_option &rArr;  free_multi_option (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_free
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_reconnect
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_close
</UL>

<P><STRONG><a name="[280]"></a>prv_server_check_binding_valid</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, object_server.o(i.prv_server_check_binding_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prv_server_check_binding_valid &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_object
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_write
</UL>

<P><STRONG><a name="[283]"></a>prv_spi_flash_erase_sector</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hal_qspi_flash.o(i.prv_spi_flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prv_spi_flash_erase_sector &rArr; prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_enable
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_wait_write_end
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_erase
</UL>

<P><STRONG><a name="[189]"></a>read_resp</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, at_hal.o(i.read_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = read_resp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_config
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
</UL>

<P><STRONG><a name="[1a0]"></a>reboot_check</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, agenttiny.o(i.reboot_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = reboot_check &rArr; atiny_cmd_ioctl &rArr; atiny_update_psk &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
</UL>

<P><STRONG><a name="[2ad]"></a>registration_deregister</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, registration.o(i.registration_deregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = registration_deregister &rArr; transaction_send &rArr; lwm2m_buffer_send &rArr; atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_uri_path
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_send
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_new
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_deregister
</UL>

<P><STRONG><a name="[2c4]"></a>registration_getStatus</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, registration.o(i.registration_getStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = registration_getStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_step
</UL>

<P><STRONG><a name="[2bc]"></a>registration_get_registered_server</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, registration.o(i.registration_get_registered_server))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_send_notify
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
</UL>

<P><STRONG><a name="[2bb]"></a>registration_reset</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, registration.o(i.registration_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = registration_reset &rArr; lwm2m_close_connection &rArr; connection_free &rArr; atiny_net_close &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_close_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_reset_register
</UL>

<P><STRONG><a name="[2c3]"></a>registration_start</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, registration.o(i.registration_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = registration_start &rArr; prv_register &rArr; lwm2m_connect_server &rArr; connection_create &rArr; connection_parse_host_ip &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_register
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_step
</UL>

<P><STRONG><a name="[2c6]"></a>registration_step</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, registration.o(i.registration_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = registration_step &rArr; prv_updateRegistration &rArr; transaction_send &rArr; lwm2m_buffer_send &rArr; atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_close_connection
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_updateRegistration
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_step
</UL>

<P><STRONG><a name="[38f]"></a>set_binary_app_data_object_rpt_max_cnt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object_binary_app_data_container.o(i.set_binary_app_data_object_rpt_max_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = set_binary_app_data_object_rpt_max_cnt &rArr; atiny_set_max_rpt_cnt &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resource_uri
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_max_rpt_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_write
</UL>

<P><STRONG><a name="[1fa]"></a>set_firmware_update_notify</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, firmware_update.o(i.set_firmware_update_notify))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_init
</UL>

<P><STRONG><a name="[1e8]"></a>start_firmware_download</STRONG> (Thumb, 622 bytes, Stack size 56 bytes, firmware_update.o(i.start_firmware_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = start_firmware_download &rArr; transaction_send &rArr; lwm2m_buffer_send &rArr; atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_free
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_uri_path
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_block2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_send
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_new
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_get_registered_server
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_firmware_uri
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_uri_info
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_recv_notify_ack
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_downloaded_state_recv_notify_ack
</UL>

<P><STRONG><a name="[17f]"></a>store_resp_buf</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, at_main.o(i.store_resp_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = store_resp_buf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_handle_resp
</UL>

<P><STRONG><a name="[2a6]"></a>tlv_parse</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, tlv.o(i.tlv_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = tlv_parse &rArr;  tlv_parse (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_parse
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_opaque
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_decode_TLV
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_parse
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_parse
</UL>

<P><STRONG><a name="[2a8]"></a>tlv_serialize</STRONG> (Thumb, 580 bytes, Stack size 72 bytes, tlv.o(i.tlv_serialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = tlv_serialize &rArr;  tlv_serialize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_serialize
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getLength
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_encodeInt
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_encodeFloat
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_createHeader
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_serialize
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_serialize
</UL>

<P><STRONG><a name="[26e]"></a>transaction_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, transaction.o(i.transaction_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = transaction_free &rArr; coap_free_header &rArr; free_multi_option &rArr;  free_multi_option (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_free_header
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteTransactionList
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_remove
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_updateRegistration
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_download_reply
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
</UL>

<P><STRONG><a name="[2b3]"></a>transaction_handleResponse</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, transaction.o(i.transaction_handleResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = transaction_handleResponse &rArr; message_send &rArr; lwm2m_buffer_send &rArr; atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_gettime
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_remove
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_checkFinished
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_send
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_session_is_equal
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init_message
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
</UL>

<P><STRONG><a name="[26d]"></a>transaction_new</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, transaction.o(i.transaction_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = transaction_new &rArr; coap_set_header_uri_path_segment &rArr; coap_add_multi_option &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_gettime
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_intToText
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_uri_path_segment
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_token
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init_message
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_deregister
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_updateRegistration
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_register
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_send_transaction
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_download_reply
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
</UL>

<P><STRONG><a name="[397]"></a>transaction_remove</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, transaction.o(i.transaction_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = transaction_remove &rArr; transaction_free &rArr; coap_free_header &rArr; free_multi_option &rArr;  free_multi_option (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_free
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_handleResponse
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_send
</UL>

<P><STRONG><a name="[271]"></a>transaction_send</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, transaction.o(i.transaction_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = transaction_send &rArr; lwm2m_buffer_send &rArr; atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_gettime
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_remove
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_buffer
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_buffer_send
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_step
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_deregister
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_updateRegistration
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_register
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_send_transaction
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_download_reply
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
</UL>

<P><STRONG><a name="[2c7]"></a>transaction_step</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, transaction.o(i.transaction_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = transaction_step &rArr; transaction_send &rArr; lwm2m_buffer_send &rArr; atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_send
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_step
</UL>

<P><STRONG><a name="[287]"></a>uri_decode</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, uri.o(i.uri_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = uri_decode &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uri_getNumber
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_request
</UL>

<P><STRONG><a name="[398]"></a>uri_getNumber</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uri.o(i.uri_getNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uri_getNumber &rArr; prv_parseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_parseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uri_decode
</UL>

<P><STRONG><a name="[24e]"></a>uri_toString</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, uri.o(i.uri_toString))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = uri_toString &rArr; utils_intToText &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_intToText
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discover_serialize
</UL>

<P><STRONG><a name="[393]"></a>utils_base64Encode</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lwm2m_utils.o(i.utils_base64Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = utils_base64Encode
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_base64GetSize
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_encodeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_textSerialize
</UL>

<P><STRONG><a name="[392]"></a>utils_base64GetSize</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwm2m_utils.o(i.utils_base64GetSize))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_base64Encode
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_textSerialize
</UL>

<P><STRONG><a name="[251]"></a>utils_convertMediaType</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, lwm2m_utils.o(i.utils_convertMediaType))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_handleRequest
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[29a]"></a>utils_copyValue</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lwm2m_utils.o(i.utils_copyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utils_copyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_int
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_float
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_encodeInt
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_encodeFloat
</UL>

<P><STRONG><a name="[288]"></a>utils_findServer</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwm2m_utils.o(i.utils_findServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = utils_findServer
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_session_is_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_request
</UL>

<P><STRONG><a name="[38d]"></a>utils_floatToText</STRONG> (Thumb, 412 bytes, Stack size 80 bytes, lwm2m_utils.o(i.utils_floatToText))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = utils_floatToText &rArr; utils_intToText &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_intToText
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_serializeAttributes
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_textSerialize
</UL>

<P><STRONG><a name="[24c]"></a>utils_intToText</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lwm2m_utils.o(i.utils_intToText))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = utils_intToText &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uri_toString
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_serializeLinkData
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_serializeAttributes
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_floatToText
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discover_serialize
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_textSerialize
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getRegistrationQueryLength
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getRegistrationQuery
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_new
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getRegisterPayloadBufferLength
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getRegisterPayload
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getObjectTemplate
</UL>

<P><STRONG><a name="[296]"></a>utils_isAltPathValid</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, lwm2m_utils.o(i.utils_isAltPathValid))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_configure
</UL>

<P><STRONG><a name="[318]"></a>utils_stringCopy</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lwm2m_utils.o(i.utils_stringCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utils_stringCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getRegistrationQuery
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getRegisterPayload
</UL>

<P><STRONG><a name="[381]"></a>utils_stringToBinding</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, lwm2m_utils.o(i.utils_stringToBinding))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getMandatoryInfo
</UL>

<P><STRONG><a name="[299]"></a>utils_textToFloat</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, lwm2m_utils.o(i.utils_textToFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = utils_textToFloat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_float
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_readAttributes
</UL>

<P><STRONG><a name="[29d]"></a>utils_textToInt</STRONG> (Thumb, 170 bytes, Stack size 36 bytes, lwm2m_utils.o(i.utils_textToInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = utils_textToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_int
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_readAttributes
</UL>

<P><STRONG><a name="[175]"></a>write_at_task_msg</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, at_hal.o(i.write_at_task_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = write_at_task_msg &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
</UL>

<P><STRONG><a name="[22b]"></a>zalloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, malloc.o(i.zalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = zalloc &rArr; malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[18b]"></a>at_usart_adapter</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, at_hal.o(i.at_usart_adapter))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_init
</UL>

<P><STRONG><a name="[281]"></a>hal_check_flash_param</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ota_port.o(i.hal_check_flash_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = hal_check_flash_param &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_write_flash
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_flash
</UL>

<P><STRONG><a name="[5b]"></a>hal_read_flash</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ota_port.o(i.hal_read_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hal_read_flash &rArr; hal_spi_flash_read &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_check_flash_param
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_port.o(i.hal_get_ota_opt)
</UL>
<P><STRONG><a name="[5c]"></a>hal_write_flash</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ota_port.o(i.hal_write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = hal_write_flash &rArr; flash_adaptor_write &rArr; hal_spi_flash_erase_write &rArr; hal_spi_flash_write &rArr; prv_spi_flash_write_page &rArr; prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_check_flash_param
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_port.o(i.hal_get_ota_opt)
</UL>
<P><STRONG><a name="[32c]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_priqueue.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
</UL>

<P><STRONG><a name="[33a]"></a>osSwTmrTimeoutHandle</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, los_swtmr.o(i.osSwTmrTimeoutHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrStart
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
</UL>

<P><STRONG><a name="[33b]"></a>osSwtmrDelete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, los_swtmr.o(i.osSwtmrDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSwtmrDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[10a]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[13d]"></a>LOS_ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListDelete))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[13e]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[33e]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[109]"></a>LOS_ListTailInsert</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, los_task.o(i.LOS_ListTailInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[11b]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
</UL>

<P><STRONG><a name="[117]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
</UL>

<P><STRONG><a name="[118]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
</UL>

<P><STRONG><a name="[127]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
</UL>

<P><STRONG><a name="[124]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
</UL>

<P><STRONG><a name="[125]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
</UL>

<P><STRONG><a name="[32e]"></a>osQueueBufferOperate</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, los_queue.o(i.osQueueBufferOperate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osQueueBufferOperate &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[129]"></a>osQueueReadParameterCheck</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, los_queue.o(i.osQueueReadParameterCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osQueueReadParameterCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
</UL>

<P><STRONG><a name="[12c]"></a>osQueueWriteParameterCheck</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, los_queue.o(i.osQueueWriteParameterCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osQueueWriteParameterCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
</UL>

<P><STRONG><a name="[132]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
</UL>

<P><STRONG><a name="[131]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
</UL>

<P><STRONG><a name="[32f]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>

<P><STRONG><a name="[fe]"></a>osRegister</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_init.o(i.osRegister))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[e4]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[e3]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[ad]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[b1]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[ae]"></a>I2C_TransferConfig</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32l4xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[ac]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[af]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[b2]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[cd]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[c6]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLLSAI1_Config &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[bb]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[bc]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[d2]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[152]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitFifoStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[153]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[bf]"></a>QSPI_Config</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, stm32l4xx_hal_qspi.o(i.QSPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[be]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32l4xx_hal_qspi.o(i.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[f2]"></a>LCD_Gpio_Init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lcd.o(i.LCD_Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = LCD_Gpio_Init &rArr; MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10ms
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[f1]"></a>LCD_SPI_Send</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lcd.o(i.LCD_SPI_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_SPI_Send &rArr; SPI2_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_HalfWord
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Cmd
</UL>

<P><STRONG><a name="[ee]"></a>LCD_Write_Cmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.LCD_Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_Write_Cmd &rArr; LCD_SPI_Send &rArr; SPI2_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[ef]"></a>LCD_Write_Data</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.LCD_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_Write_Data &rArr; LCD_SPI_Send &rArr; SPI2_WriteByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[391]"></a>prv_spi_flash_wait_write_end</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hal_qspi_flash.o(i.prv_spi_flash_wait_write_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_erase_sector
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_page
</UL>

<P><STRONG><a name="[390]"></a>prv_spi_flash_write_enable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hal_qspi_flash.o(i.prv_spi_flash_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prv_spi_flash_write_enable &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_erase_sector
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_page
</UL>

<P><STRONG><a name="[285]"></a>prv_spi_flash_write_page</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, hal_qspi_flash.o(i.prv_spi_flash_write_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prv_spi_flash_write_page &rArr; prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Transmit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_enable
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_wait_write_end
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_write
</UL>

<P><STRONG><a name="[e5]"></a>I2C_MPU6050_Error</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, e53_sc2.o(i.I2C_MPU6050_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_MPU6050_Error &rArr; HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_WriteData
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_ReadBuffer
</UL>

<P><STRONG><a name="[2d8]"></a>mbedtls_clz</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_clz))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>

<P><STRONG><a name="[2cd]"></a>mbedtls_int_div_int</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, bignum.o(i.mbedtls_int_div_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_int_div_int &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[2ea]"></a>mbedtls_mpi_zeroize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>

<P><STRONG><a name="[2f1]"></a>mpi_get_digit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bignum.o(i.mpi_get_digit))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[2e4]"></a>mpi_montg_init</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, bignum.o(i.mpi_montg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpi_montg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[2e6]"></a>mpi_montmul</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, bignum.o(i.mpi_montmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[2e7]"></a>mpi_montred</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, bignum.o(i.mpi_montred))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[2ef]"></a>mpi_mul_hlp</STRONG> (Thumb, 1584 bytes, Stack size 32 bytes, bignum.o(i.mpi_mul_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[2f4]"></a>mpi_sub_hlp</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, bignum.o(i.mpi_sub_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[2cf]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[78]"></a>sha224_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>sha224_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha224_ctx_alloc &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>sha224_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha224_ctx_free &rArr; mbedtls_sha256_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>sha224_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>sha224_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sha224_process_wrap &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>sha224_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>sha224_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>sha224_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sha224_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>sha256_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(i.sha256_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha256_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>sha256_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(i.sha256_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sha256_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[312]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[304]"></a>mgf_mask</STRONG> (Thumb, 138 bytes, Stack size 88 bytes, rsa.o(i.mgf_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mgf_mask &rArr; mbedtls_md_update
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[2fd]"></a>rsa_prepare_blinding</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, rsa.o(i.rsa_prepare_blinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[30f]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sha256.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>

<P><STRONG><a name="[2a2]"></a>prv_setBuffer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, data.o(i.prv_setBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = prv_setBuffer &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_parse
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_string
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_opaque
</UL>

<P><STRONG><a name="[2a7]"></a>prv_textSerialize</STRONG> (Thumb, 388 bytes, Stack size 88 bytes, data.o(i.prv_textSerialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = prv_textSerialize &rArr; utils_floatToText &rArr; utils_intToText &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_intToText
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_floatToText
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_base64GetSize
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_base64Encode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_serialize
</UL>

<P><STRONG><a name="[24b]"></a>prv_findAttributes</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, discover.o(i.prv_findAttributes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prv_findAttributes &rArr; observe_findByUri
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_findByUri
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_serializeAttributes
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discover_serialize
</UL>

<P><STRONG><a name="[24d]"></a>prv_serializeAttributes</STRONG> (Thumb, 670 bytes, Stack size 56 bytes, discover.o(i.prv_serializeAttributes))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prv_serializeAttributes &rArr; utils_floatToText &rArr; utils_intToText &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_findAttributes
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_intToText
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_floatToText
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_serializeLinkData
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discover_serialize
</UL>

<P><STRONG><a name="[24f]"></a>prv_serializeLinkData</STRONG> (Thumb, 648 bytes, Stack size 104 bytes, discover.o(i.prv_serializeLinkData))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + In Cycle
<LI>Call Chain = prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_serializeLinkData
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_serializeAttributes
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_intToText
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_serializeLinkData
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discover_serialize
</UL>

<P><STRONG><a name="[2ac]"></a>lwm2m_delayBsRetry</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, liblwm2m.o(i.lwm2m_delayBsRetry))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = lwm2m_delayBsRetry &rArr; lwm2m_delay &rArr; atiny_delay &rArr; LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_step
</UL>

<P><STRONG><a name="[2b7]"></a>lwm2m_reset_register</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, liblwm2m.o(i.lwm2m_reset_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = lwm2m_reset_register &rArr; registration_reset &rArr; lwm2m_close_connection &rArr; connection_free &rArr; atiny_net_close &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_reconnect
</UL>

<P><STRONG><a name="[2bf]"></a>lwm2m_setBsCtrlStatWithoutCheck</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, liblwm2m.o(i.lwm2m_setBsCtrlStatWithoutCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwm2m_setBsCtrlStatWithoutCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_setBsCtrlStat
</UL>

<P><STRONG><a name="[293]"></a>prv_deleteObservedList</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, liblwm2m.o(i.prv_deleteObservedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = prv_deleteObservedList &rArr; lwm2m_list_free &rArr;  lwm2m_list_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_free
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_unlock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_notify_even
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_reconnect
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_close
</UL>

<P><STRONG><a name="[376]"></a>prv_deleteServer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, liblwm2m.o(i.prv_deleteServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = prv_deleteServer &rArr; lwm2m_close_connection &rArr; connection_free &rArr; atiny_net_close &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_close_connection
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_block1_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_refreshServerList
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteServerList
</UL>

<P><STRONG><a name="[292]"></a>prv_deleteServerList</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, liblwm2m.o(i.prv_deleteServerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = prv_deleteServerList &rArr; prv_deleteServer &rArr; lwm2m_close_connection &rArr; connection_free &rArr; atiny_net_close &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteServer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_close
</UL>

<P><STRONG><a name="[2c0]"></a>prv_isBoostrpEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, liblwm2m.o(i.prv_isBoostrpEnable))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_step
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_setBsCtrlStat
</UL>

<P><STRONG><a name="[2c2]"></a>prv_refreshServerList</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, liblwm2m.o(i.prv_refreshServerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = prv_refreshServerList &rArr; object_getServers &rArr; prv_getMandatoryInfo &rArr; lwm2m_data_new &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getServers
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_deleteServer
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_step
</UL>

<P><STRONG><a name="[252]"></a>dm_isUriOpaqueHandle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, management.o(i.dm_isUriOpaqueHandle))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[260]"></a>prv_readAttributes</STRONG> (Thumb, 764 bytes, Stack size 32 bytes, management.o(i.prv_readAttributes))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prv_readAttributes &rArr; utils_textToFloat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_textToInt
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_textToFloat
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_strncmp
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>

<P><STRONG><a name="[31c]"></a>prv_findServerInstance</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, objects.o(i.prv_findServerInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = prv_findServerInstance &rArr; lwm2m_data_new &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getServers
</UL>

<P><STRONG><a name="[31d]"></a>prv_getMandatoryInfo</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, objects.o(i.prv_getMandatoryInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = prv_getMandatoryInfo &rArr; lwm2m_data_new &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_int
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_stringToBinding
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getServers
</UL>

<P><STRONG><a name="[319]"></a>prv_getObjectTemplate</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, objects.o(i.prv_getObjectTemplate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prv_getObjectTemplate &rArr; utils_intToText &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_intToText
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getRegisterPayloadBufferLength
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getRegisterPayload
</UL>

<P><STRONG><a name="[31e]"></a>prv_init_forbidden</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, objects.o(i.prv_init_forbidden))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = prv_init_forbidden &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_auth_operate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_readData
</UL>

<P><STRONG><a name="[325]"></a>prv_findObserved</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, observe.o(i.prv_findObserved))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prv_findObserved
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getWatcher
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_handleRequest
</UL>

<P><STRONG><a name="[326]"></a>prv_findWatcher</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, observe.o(i.prv_findWatcher))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getWatcher
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_handleRequest
</UL>

<P><STRONG><a name="[324]"></a>prv_getWatcher</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, observe.o(i.prv_getWatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = prv_getWatcher &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_unlock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_mutex_lock
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_findWatcher
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_findObserved
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_setParameters
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_handleRequest
</UL>

<P><STRONG><a name="[322]"></a>prv_unlinkObserved</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, observe.o(i.prv_unlinkObserved))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_cancel
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_clear
</UL>

<P><STRONG><a name="[286]"></a>handle_request</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, packet.o(i.handle_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720 + Unknown Stack Size
<LI>Call Chain = handle_request &rArr; dm_handleRequest &rArr; object_read &rArr; lwm2m_data_serialize &rArr; discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_findServer
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uri_decode
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_status_code
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handleRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
</UL>

<P><STRONG><a name="[28a]"></a>handle_reset</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, packet.o(i.handle_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = handle_reset &rArr; observe_cancel &rArr; atiny_mutex_lock &rArr; LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observe_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
</UL>

<P><STRONG><a name="[382]"></a>prv_getRegistrationQuery</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, registration.o(i.prv_getRegistrationQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prv_getRegistrationQuery &rArr; utils_intToText &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_intToText
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_stringCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_register
</UL>

<P><STRONG><a name="[383]"></a>prv_getRegistrationQueryLength</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, registration.o(i.prv_getRegistrationQueryLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prv_getRegistrationQueryLength &rArr; utils_intToText &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_intToText
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_register
</UL>

<P><STRONG><a name="[71]"></a>prv_handleDeregistrationReply</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, registration.o(i.prv_handleDeregistrationReply))
<BR>[Address Reference Count : 1]<UL><LI> registration.o(i.registration_deregister)
</UL>
<P><STRONG><a name="[6f]"></a>prv_handleRegistrationReply</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, registration.o(i.prv_handleRegistrationReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = prv_handleRegistrationReply &rArr; coap_get_multi_option_as_string &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_gettime
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_multi_option_as_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> registration.o(i.prv_register)
</UL>
<P><STRONG><a name="[70]"></a>prv_handleRegistrationUpdateReply</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, registration.o(i.prv_handleRegistrationUpdateReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = prv_handleRegistrationUpdateReply &rArr; lwm2m_gettime &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_gettime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> registration.o(i.prv_updateRegistration)
</UL>
<P><STRONG><a name="[38b]"></a>prv_register</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, registration.o(i.prv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = prv_register &rArr; lwm2m_connect_server &rArr; connection_create &rArr; connection_parse_host_ip &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_connect_server
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_uri_query
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_uri_path
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getRegistrationQueryLength
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getRegistrationQuery
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_send
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_new
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getRegisterPayloadBufferLength
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getRegisterPayload
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_payload
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_content_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_start
</UL>

<P><STRONG><a name="[394]"></a>prv_updateRegistration</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, registration.o(i.prv_updateRegistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = prv_updateRegistration &rArr; transaction_send &rArr; lwm2m_buffer_send &rArr; atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_free
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_uri_path
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_send
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_new
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getRegisterPayloadBufferLength
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_getRegisterPayload
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registration_step
</UL>

<P><STRONG><a name="[372]"></a>prv_createHeader</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, tlv.o(i.prv_createHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prv_createHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getHeaderType
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getHeaderLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_serialize
</UL>

<P><STRONG><a name="[37a]"></a>prv_encodeFloat</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tlv.o(i.prv_encodeFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prv_encodeFloat &rArr; utils_copyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_copyValue
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_serialize
</UL>

<P><STRONG><a name="[37b]"></a>prv_encodeInt</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, tlv.o(i.prv_encodeInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prv_encodeInt &rArr; utils_copyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_copyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_serialize
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getLength
</UL>

<P><STRONG><a name="[2aa]"></a>prv_getDataType</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tlv.o(i.prv_getDataType))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_decode_TLV
</UL>

<P><STRONG><a name="[373]"></a>prv_getHeaderLength</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tlv.o(i.prv_getHeaderLength))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getLength
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_createHeader
</UL>

<P><STRONG><a name="[374]"></a>prv_getHeaderType</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tlv.o(i.prv_getHeaderType))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_createHeader
</UL>

<P><STRONG><a name="[380]"></a>prv_getLength</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, tlv.o(i.prv_getLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = prv_getLength &rArr;  prv_getLength (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getLength
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getHeaderLength
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_encodeInt
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_serialize
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_getLength
</UL>

<P><STRONG><a name="[36c]"></a>prv_checkFinished</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, transaction.o(i.prv_checkFinished))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prv_checkFinished &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_header_token
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_handleResponse
</UL>

<P><STRONG><a name="[2c9]"></a>prv_parseNumber</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, uri.o(i.prv_parseNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prv_parseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uri_getNumber
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_stringToUri
</UL>

<P><STRONG><a name="[23b]"></a>coap_log_2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, er-coap-13.o(i.coap_log_2))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
</UL>

<P><STRONG><a name="[233]"></a>coap_merge_multi_option</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, er-coap-13.o(i.coap_merge_multi_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = coap_merge_multi_option &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_parse_message
</UL>

<P><STRONG><a name="[241]"></a>coap_option_nibble</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, er-coap-13.o(i.coap_option_nibble))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_option_header
</UL>

<P><STRONG><a name="[235]"></a>coap_parse_int_option</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, er-coap-13.o(i.coap_parse_int_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = coap_parse_int_option
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_parse_message
</UL>

<P><STRONG><a name="[236]"></a>coap_serialize_array_option</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, er-coap-13.o(i.coap_serialize_array_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = coap_serialize_array_option &rArr; coap_set_option_header
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_option_header
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
</UL>

<P><STRONG><a name="[238]"></a>coap_serialize_int_option</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, er-coap-13.o(i.coap_serialize_int_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = coap_serialize_int_option &rArr; coap_set_option_header
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_option_header
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
</UL>

<P><STRONG><a name="[23a]"></a>coap_serialize_multi_option</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, er-coap-13.o(i.coap_serialize_multi_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = coap_serialize_multi_option &rArr; coap_set_option_header
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_option_header
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
</UL>

<P><STRONG><a name="[237]"></a>coap_set_option_header</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, er-coap-13.o(i.coap_set_option_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = coap_set_option_header
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_option_nibble
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_multi_option
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_int_option
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_array_option
</UL>

<P><STRONG><a name="[399]"></a>prv_encodeBlock</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lwm2m_utils.o(i.prv_encodeBlock))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_base64Encode
</UL>

<P><STRONG><a name="[207]"></a>osKernelGetTickCount</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, atiny_osdep.o(i.osKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
</UL>

<P><STRONG><a name="[20a]"></a>atiny_check_bootstrap_init_param</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, agenttiny.o(i.atiny_check_bootstrap_init_param))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init
</UL>

<P><STRONG><a name="[2c]"></a>atiny_connection_err_notify</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, agenttiny.o(i.atiny_connection_err_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = atiny_connection_err_notify &rArr; atiny_reconnect &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_reconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> agenttiny.o(i.atiny_bind)
</UL>
<P><STRONG><a name="[19e]"></a>atiny_handle_reconnect</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, agenttiny.o(i.atiny_handle_reconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_handle_reconnect &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_reconnect
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
</UL>

<P><STRONG><a name="[1dc]"></a>dm_isUriOpaqueHandle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, agenttiny.o(i.dm_isUriOpaqueHandle))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_event_handle
</UL>

<P><STRONG><a name="[1a1]"></a>lwm2m_poll</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, agenttiny.o(i.lwm2m_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856 + Unknown Stack Size
<LI>Call Chain = lwm2m_poll &rArr; lwm2m_handle_packet &rArr; handle_request &rArr; dm_handleRequest &rArr; object_read &rArr; lwm2m_data_serialize &rArr; discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_buffer
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_handle_packet
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_buffer_recv
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_bind
</UL>

<P><STRONG><a name="[2e]"></a>atiny_clear_rpt_list</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, atiny_rpt.o(i.atiny_clear_rpt_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = atiny_clear_rpt_list &rArr; atiny_free_list &rArr; lwm2m_free &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_rpt.o(i.atiny_destroy_rpt)
</UL>
<P><STRONG><a name="[2d]"></a>atiny_clear_rpt_list_node_data</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atiny_rpt.o(i.atiny_clear_rpt_list_node_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = atiny_clear_rpt_list_node_data &rArr; lwm2m_free &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Address Reference Count : 3]<UL><LI> atiny_rpt.o(i.atiny_clear_rpt_data)
<LI> atiny_rpt.o(i.atiny_clear_rpt_list)
<LI> atiny_rpt.o(i.atiny_rm_rpt_uri)
</UL>
<P><STRONG><a name="[191]"></a>atiny_find_rpt_list</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, atiny_rpt.o(i.atiny_find_rpt_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atiny_find_rpt_list
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_is_uri_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_max_rpt_cnt
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_rm_rpt_uri
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_add_rpt_uri
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_clear_rpt_data
</UL>

<P><STRONG><a name="[1a3]"></a>atiny_free_list</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, atiny_rpt.o(i.atiny_free_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = atiny_free_list &rArr; lwm2m_free &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_list_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_rm_rpt_uri
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_clear_rpt_list
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_destroy_rpt
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_clear_rpt_data
</UL>

<P><STRONG><a name="[1dd]"></a>atiny_is_uri_equal</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, atiny_rpt.o(i.atiny_is_uri_equal))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_find_rpt_list
</UL>

<P><STRONG><a name="[1ce]"></a>atiny_list_delete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, atiny_rpt.o(i.atiny_list_delete))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_rm_rpt_uri
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_dequeue_rpt_data
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free_list
</UL>

<P><STRONG><a name="[1cd]"></a>atiny_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, atiny_rpt.o(i.atiny_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_dequeue_rpt_data
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_notify_stack_rpt_data_change
</UL>

<P><STRONG><a name="[192]"></a>atiny_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, atiny_rpt.o(i.atiny_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_add_rpt_uri
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_init_rpt
</UL>

<P><STRONG><a name="[193]"></a>atiny_list_insert_tail</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, atiny_rpt.o(i.atiny_list_insert_tail))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_add_rpt_uri
</UL>

<P><STRONG><a name="[3e]"></a>atiny_notify_stack_rpt_data_change</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, atiny_rpt.o(i.atiny_notify_stack_rpt_data_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = atiny_notify_stack_rpt_data_change &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_resource_value_changed
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_list_empty
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_rpt.o(i.atiny_step_rpt)
</UL>
<P><STRONG><a name="[226]"></a>atiny_visit_list</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, atiny_rpt.o(i.atiny_visit_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atiny_visit_list
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_step_rpt
</UL>

<P><STRONG><a name="[290]"></a>connection_is_valid</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, connection.o(i.connection_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = connection_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_buffer_send
</UL>

<P><STRONG><a name="[28e]"></a>inc_connection_stat</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, connection.o(i.inc_connection_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inc_connection_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_buffer_send
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_buffer_recv
</UL>

<P><STRONG><a name="[36a]"></a>prv_acc_self_auth_check</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, object_access_control.o(i.prv_acc_self_auth_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prv_acc_self_auth_check
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_pre_auth_check
</UL>

<P><STRONG><a name="[36b]"></a>prv_add_ac_val</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, object_access_control.o(i.prv_add_ac_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = prv_add_ac_val &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_write_resources
</UL>

<P><STRONG><a name="[36e]"></a>prv_check_instance_auth</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, object_access_control.o(i.prv_check_instance_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prv_check_instance_auth &rArr; prv_get_acl_instance
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_get_acl_instance
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_get_acc_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_pre_auth_check
</UL>

<P><STRONG><a name="[27]"></a>prv_create</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, object_access_control.o(i.prv_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = prv_create &rArr; prv_write_resources &rArr; prv_add_ac_val &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_write_resources
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_access_control.o(i.acc_ctrl_create_object)
</UL>
<P><STRONG><a name="[28]"></a>prv_delete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, object_access_control.o(i.prv_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = prv_delete &rArr; lwm2m_list_free &rArr;  lwm2m_list_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_remove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_access_control.o(i.acc_ctrl_create_object)
</UL>
<P><STRONG><a name="[36f]"></a>prv_get_acc_instance</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, object_access_control.o(i.prv_get_acc_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prv_get_acc_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_check_instance_auth
</UL>

<P><STRONG><a name="[370]"></a>prv_get_acl_instance</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, object_access_control.o(i.prv_get_acl_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prv_get_acl_instance
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_check_instance_auth
</UL>

<P><STRONG><a name="[162]"></a>prv_get_srv_cnt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, object_access_control.o(i.prv_get_srv_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_auth_operate
</UL>

<P><STRONG><a name="[165]"></a>prv_post_action_check</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, object_access_control.o(i.prv_post_action_check))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_auth_operate
</UL>

<P><STRONG><a name="[164]"></a>prv_pre_auth_check</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, object_access_control.o(i.prv_pre_auth_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prv_pre_auth_check &rArr; prv_check_instance_auth &rArr; prv_get_acl_instance
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_check_instance_auth
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_acc_self_auth_check
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_auth_operate
</UL>

<P><STRONG><a name="[25]"></a>prv_read</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, object_access_control.o(i.prv_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = prv_read &rArr; prv_set_tlv &rArr; lwm2m_data_new &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_tlv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_access_control.o(i.acc_ctrl_create_object)
</UL>
<P><STRONG><a name="[388]"></a>prv_set_tlv</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, object_access_control.o(i.prv_set_tlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = prv_set_tlv &rArr; lwm2m_data_new &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_int
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_instances
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read
</UL>

<P><STRONG><a name="[26]"></a>prv_write</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, object_access_control.o(i.prv_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = prv_write &rArr; prv_write_resources &rArr; prv_add_ac_val &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_write_resources
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_access_control.o(i.acc_ctrl_create_object)
</UL>
<P><STRONG><a name="[371]"></a>prv_write_resources</STRONG> (Thumb, 488 bytes, Stack size 72 bytes, object_access_control.o(i.prv_write_resources))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = prv_write_resources &rArr; prv_add_ac_val &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_free
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_int
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_add_ac_val
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_write
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
</UL>

<P><STRONG><a name="[27c]"></a>free_binary_app_data_object_rpt</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, object_binary_app_data_container.o(i.free_binary_app_data_object_rpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = free_binary_app_data_object_rpt &rArr; atiny_rm_rpt_uri &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resource_uri
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_rm_rpt_uri
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_binary_app_data_object
</UL>

<P><STRONG><a name="[27d]"></a>get_resource_uri</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, object_binary_app_data_container.o(i.get_resource_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_resource_uri
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binary_app_data_object_rpt_max_cnt
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_delete
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_binary_app_data_object_rpt
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_binary_app_data_object
</UL>

<P><STRONG><a name="[49]"></a>prv_create</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, object_binary_app_data_container.o(i.prv_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = prv_create &rArr; prv_write &rArr; atiny_cmd_ioctl &rArr; atiny_update_psk &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_delete
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resource_uri
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_add_rpt_uri
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_binary_app_data_container.o(i.get_binary_app_data_object)
</UL>
<P><STRONG><a name="[4a]"></a>prv_delete</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, object_binary_app_data_container.o(i.prv_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = prv_delete &rArr; atiny_rm_rpt_uri &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_remove
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resource_uri
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_rm_rpt_uri
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_binary_app_data_container.o(i.get_binary_app_data_object)
</UL>
<P><STRONG><a name="[377]"></a>prv_destroy_data_buf</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, object_binary_app_data_container.o(i.prv_destroy_data_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = prv_destroy_data_buf &rArr; lwm2m_free &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read
</UL>

<P><STRONG><a name="[46]"></a>prv_discover</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, object_binary_app_data_container.o(i.prv_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = prv_discover &rArr; lwm2m_data_new &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_binary_app_data_container.o(i.get_binary_app_data_object)
</UL>
<P><STRONG><a name="[48]"></a>prv_exec</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, object_binary_app_data_container.o(i.prv_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = prv_exec &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_output_buffer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_binary_app_data_container.o(i.get_binary_app_data_object)
</UL>
<P><STRONG><a name="[37d]"></a>prv_output_buffer</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, object_binary_app_data_container.o(i.prv_output_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prv_output_buffer &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_exec
</UL>

<P><STRONG><a name="[45]"></a>prv_read</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, object_binary_app_data_container.o(i.prv_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = prv_read &rArr; prv_read_data &rArr; atiny_dequeue_rpt_data &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read_data
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_destroy_data_buf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_binary_app_data_container.o(i.get_binary_app_data_object)
</UL>
<P><STRONG><a name="[389]"></a>prv_read_data</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, object_binary_app_data_container.o(i.prv_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = prv_read_data &rArr; atiny_dequeue_rpt_data &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_dequeue_rpt_data
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read
</UL>

<P><STRONG><a name="[47]"></a>prv_write</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, object_binary_app_data_container.o(i.prv_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = prv_write &rArr; atiny_cmd_ioctl &rArr; atiny_update_psk &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_binary_app_data_container.o(i.get_binary_app_data_object)
</UL>
<P><STRONG><a name="[4b]"></a>prv_read</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, object_connectivity_moni.o(i.prv_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = prv_read &rArr; prv_set_value &rArr; atiny_cmd_ioctl &rArr; atiny_update_psk &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_value
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_connectivity_moni.o(i.get_object_conn_m)
</UL>
<P><STRONG><a name="[38a]"></a>prv_set_value</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, object_connectivity_moni.o(i.prv_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = prv_set_value &rArr; atiny_cmd_ioctl &rArr; atiny_update_psk &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_string
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_int
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_instances
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read
</UL>

<P><STRONG><a name="[379]"></a>prv_check_time_offset</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, object_device.o(i.prv_check_time_offset))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_device_write
</UL>

<P><STRONG><a name="[4d]"></a>prv_device_discover</STRONG> (Thumb, 188 bytes, Stack size 72 bytes, object_device.o(i.prv_device_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = prv_device_discover &rArr; lwm2m_data_new &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_device.o(i.get_object_device)
</UL>
<P><STRONG><a name="[4f]"></a>prv_device_execute</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, object_device.o(i.prv_device_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = prv_device_execute &rArr; atiny_cmd_ioctl &rArr; atiny_update_psk &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_device.o(i.get_object_device)
</UL>
<P><STRONG><a name="[4c]"></a>prv_device_read</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, object_device.o(i.prv_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = prv_device_read &rArr; prv_set_value &rArr; atiny_cmd_ioctl &rArr; atiny_update_psk &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_value
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_device.o(i.get_object_device)
</UL>
<P><STRONG><a name="[4e]"></a>prv_device_write</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, object_device.o(i.prv_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = prv_device_write &rArr; atiny_cmd_ioctl &rArr; atiny_update_psk &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_int
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_check_time_offset
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_device.o(i.get_object_device)
</UL>
<P><STRONG><a name="[378]"></a>prv_set_value</STRONG> (Thumb, 642 bytes, Stack size 152 bytes, object_device.o(i.prv_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = prv_set_value &rArr; atiny_cmd_ioctl &rArr; atiny_update_psk &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_string
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_int
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_instances
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_device_read
</UL>

<P><STRONG><a name="[52]"></a>prv_firmware_execute</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, object_firmware.o(i.prv_firmware_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = prv_firmware_execute &rArr; atiny_fota_manager_execute_update &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_execute_update
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_instance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_firmware.o(i.get_object_firmware)
</UL>
<P><STRONG><a name="[50]"></a>prv_firmware_read</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, object_firmware.o(i.prv_firmware_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = prv_firmware_read &rArr; atiny_fota_manager_get_instance &rArr; atiny_fota_manager_init &rArr; atiny_event_notify &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_nstring
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_int
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_update_result
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_rpt_state
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_pkg_uri
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_deliver_method
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_data_cfg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_instance
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_firmware.o(i.get_object_firmware)
</UL>
<P><STRONG><a name="[51]"></a>prv_firmware_write</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, object_firmware.o(i.prv_firmware_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = prv_firmware_write &rArr; atiny_fota_manager_start_download &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_start_download
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_instance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_firmware.o(i.get_object_firmware)
</UL>
<P><STRONG><a name="[53]"></a>prv_location_read</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, object_location.o(i.prv_location_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = prv_location_read &rArr; prv_res2tlv &rArr; atiny_cmd_ioctl &rArr; atiny_update_psk &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_res2tlv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_location.o(i.get_object_location)
</UL>
<P><STRONG><a name="[387]"></a>prv_res2tlv</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, object_location.o(i.prv_res2tlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = prv_res2tlv &rArr; atiny_cmd_ioctl &rArr; atiny_update_psk &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_opaque
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_float
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_cmd_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_location_read
</UL>

<P><STRONG><a name="[384]"></a>prv_get_value</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, object_security.o(i.prv_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = prv_get_value &rArr; lwm2m_data_encode_string &rArr; prv_setBuffer &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_string
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_opaque
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_int
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_security_read
</UL>

<P><STRONG><a name="[54]"></a>prv_security_read</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, object_security.o(i.prv_security_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = prv_security_read &rArr; prv_get_value &rArr; lwm2m_data_encode_string &rArr; prv_setBuffer &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_get_value
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_security.o(i.get_security_object)
</UL>
<P><STRONG><a name="[386]"></a>prv_get_value</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, object_server.o(i.prv_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = prv_get_value &rArr; lwm2m_data_encode_string &rArr; prv_setBuffer &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_string
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_int
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_encode_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_read
</UL>

<P><STRONG><a name="[58]"></a>prv_server_create</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, object_server.o(i.prv_server_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = prv_server_create &rArr; prv_server_write &rArr; set_binary_app_data_object_rpt_max_cnt &rArr; atiny_set_max_rpt_cnt &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_delete
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_server.o(i.get_server_object)
</UL>
<P><STRONG><a name="[59]"></a>prv_server_delete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object_server.o(i.prv_server_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = prv_server_delete &rArr; lwm2m_free &rArr; atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_remove
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_server.o(i.get_server_object)
</UL>
<P><STRONG><a name="[56]"></a>prv_server_discover</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, object_server.o(i.prv_server_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = prv_server_discover &rArr; lwm2m_data_new &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_server.o(i.get_server_object)
</UL>
<P><STRONG><a name="[5a]"></a>prv_server_execute</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, object_server.o(i.prv_server_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prv_server_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_server.o(i.get_server_object)
</UL>
<P><STRONG><a name="[55]"></a>prv_server_read</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, object_server.o(i.prv_server_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = prv_server_read &rArr; prv_get_value &rArr; lwm2m_data_encode_string &rArr; prv_setBuffer &rArr; lwm2m_malloc &rArr; atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_new
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_get_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_server.o(i.get_server_object)
</UL>
<P><STRONG><a name="[57]"></a>prv_server_write</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, object_server.o(i.prv_server_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = prv_server_write &rArr; set_binary_app_data_object_rpt_max_cnt &rArr; atiny_set_max_rpt_cnt &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_find
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_bool
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_binary_app_data_object_rpt_max_cnt
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_check_binding_valid
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_int_value
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_server.o(i.get_server_object)
</UL>
<P><STRONG><a name="[38e]"></a>prv_set_int_value</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, object_server.o(i.prv_set_int_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = prv_set_int_value &rArr; lwm2m_data_decode_int &rArr; utils_textToInt
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_data_decode_int
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_server_write
</UL>

<P><STRONG><a name="[38]"></a>atiny_fota_manager_flag_read</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, atiny_fota_manager.o(i.atiny_fota_manager_flag_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_flag_read &rArr; atiny_fota_manager_get_instance &rArr; atiny_fota_manager_init &rArr; atiny_event_notify &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_instance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_fota_manager.o(i.atiny_fota_manager_set_storage_device)
</UL>
<P><STRONG><a name="[39]"></a>atiny_fota_manager_flag_write</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, atiny_fota_manager.o(i.atiny_fota_manager_flag_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_flag_write &rArr; atiny_fota_manager_get_instance &rArr; atiny_fota_manager_init &rArr; atiny_event_notify &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_instance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_fota_manager.o(i.atiny_fota_manager_set_storage_device)
</UL>
<P><STRONG><a name="[36]"></a>atiny_fota_manager_notify_ack_callback</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, atiny_fota_manager.o(i.atiny_fota_manager_notify_ack_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_notify_ack_callback &rArr; atiny_fota_manager_get_instance &rArr; atiny_fota_manager_init &rArr; atiny_event_notify &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_instance
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rcv_notify_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_fota_manager.o(i.atiny_fota_manager_get_data_cfg)
</UL>
<P><STRONG><a name="[1fb]"></a>atiny_fota_manager_rcv_notify_ack</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, atiny_fota_manager.o(i.atiny_fota_manager_rcv_notify_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = atiny_fota_manager_rcv_notify_ack &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_notify_ack_callback
</UL>

<P><STRONG><a name="[30]"></a>atiny_fota_downloaded_state_execute_update</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, atiny_fota_state.o(i.atiny_fota_downloaded_state_execute_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = atiny_fota_downloaded_state_execute_update &rArr; atiny_fota_manager_rpt_state &rArr; atiny_fota_manager_save_rpt_state &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_update_result
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_update_result
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rpt_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_fota_state.o(i.atiny_fota_downloaded_state_init)
</UL>
<P><STRONG><a name="[31]"></a>atiny_fota_downloaded_state_recv_notify_ack</STRONG> (Thumb, 510 bytes, Stack size 64 bytes, atiny_fota_state.o(i.atiny_fota_downloaded_state_recv_notify_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = atiny_fota_downloaded_state_recv_notify_ack &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_get_observe_info
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_rpt_state
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_pkg_uri
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_set_reboot_flag
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_write
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_update_result
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_state
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rpt_state
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_storage_device
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_lwm2m_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_fota_state.o(i.atiny_fota_downloaded_state_init)
</UL>
<P><STRONG><a name="[32]"></a>atiny_fota_downloading_state_finish_download</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, atiny_fota_state.o(i.atiny_fota_downloading_state_finish_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = atiny_fota_downloading_state_finish_download &rArr; atiny_fota_manager_rpt_state &rArr; atiny_fota_manager_save_rpt_state &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_update_result
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rpt_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_fota_state.o(i.atiny_fota_downloading_state_init)
</UL>
<P><STRONG><a name="[33]"></a>atiny_fota_downloading_state_recv_notify_ack</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, atiny_fota_state.o(i.atiny_fota_downloading_state_recv_notify_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = atiny_fota_downloading_state_recv_notify_ack &rArr; atiny_fota_manager_set_state &rArr; atiny_event_notify &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_rpt_state
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_update_result
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_fota_state.o(i.atiny_fota_downloading_state_init)
</UL>
<P><STRONG><a name="[1ed]"></a>atiny_fota_idle_state_get_result</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, atiny_fota_state.o(i.atiny_fota_idle_state_get_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = atiny_fota_idle_state_get_result &rArr; flag_upgrade_get_result &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_upgrade_get_result
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_idle_state_int_report_result
</UL>

<P><STRONG><a name="[35]"></a>atiny_fota_idle_state_recv_notify_ack</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, atiny_fota_state.o(i.atiny_fota_idle_state_recv_notify_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = atiny_fota_idle_state_recv_notify_ack &rArr; start_firmware_download &rArr; transaction_send &rArr; lwm2m_buffer_send &rArr; atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_rpt_state
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_pkg_uri
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_update_result
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_state
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rpt_state
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_storage_device
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_lwm2m_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_fota_state.o(i.atiny_fota_idle_state_init)
</UL>
<P><STRONG><a name="[34]"></a>atiny_fota_idle_state_report_result</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, atiny_fota_state.o(i.atiny_fota_idle_state_report_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + Unknown Stack Size
<LI>Call Chain = atiny_fota_idle_state_report_result &rArr; lwm2m_send_notify &rArr; lwm2m_data_serialize &rArr; discover_serialize &rArr; prv_serializeLinkData &rArr;  prv_serializeLinkData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_send_notify
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_data_cfg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_update_result
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_save_rpt_state
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_lwm2m_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_fota_state.o(i.atiny_fota_idle_state_init)
</UL>
<P><STRONG><a name="[2f]"></a>atiny_fota_start_download</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, atiny_fota_state.o(i.atiny_fota_start_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = atiny_fota_start_download &rArr; atiny_fota_manager_rpt_state &rArr; atiny_fota_manager_save_rpt_state &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_set_update_result
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_rpt_state
</UL>
<BR>[Address Reference Count : 2]<UL><LI> atiny_fota_state.o(i.atiny_fota_idle_state_init)
<LI> atiny_fota_state.o(i.atiny_fota_downloaded_state_init)
</UL>
<P><STRONG><a name="[3d]"></a>atiny_fota_state_default_handle</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, atiny_fota_state.o(i.atiny_fota_state_default_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = atiny_fota_state_default_handle &rArr; atiny_fota_manager_get_state &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_fota_manager_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atiny_fota_state.o(i.atiny_fota_state_init)
</UL>
<P><STRONG><a name="[44]"></a>firmware_download_reply</STRONG> (Thumb, 1474 bytes, Stack size 80 bytes, firmware_update.o(i.firmware_download_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = firmware_download_reply &rArr; transaction_send &rArr; lwm2m_buffer_send &rArr; atiny_net_send &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_free
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_list_add
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_uri_path
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_block2
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_header_block2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_send
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_new
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
</UL>
<BR>[Address Reference Count : 2]<UL><LI> firmware_update.o(i.firmware_download_reply)
<LI> firmware_update.o(i.start_firmware_download)
</UL>
<P><STRONG><a name="[395]"></a>record_fw_uri</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, firmware_update.o(i.record_fw_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = record_fw_uri &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_malloc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_uri_info
</UL>

<P><STRONG><a name="[396]"></a>update_uri_info</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, firmware_update.o(i.update_uri_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = update_uri_info &rArr; record_fw_uri &rArr; atiny_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwm2m_free
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_get_log_level
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_fw_uri
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_firmware_download
</UL>

<P><STRONG><a name="[17a]"></a>at_get_queue_wait_time</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, at_main.o(i.at_get_queue_wait_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = at_get_queue_wait_time &rArr; LOS_MuxPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
</UL>

<P><STRONG><a name="[17b]"></a>at_handle_callback_cmd_resp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_main.o(i.at_handle_callback_cmd_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = at_handle_callback_cmd_resp &rArr; at_rm_node &rArr; at_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_node
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_handle_resp
</UL>

<P><STRONG><a name="[17d]"></a>at_handle_resp</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, at_main.o(i.at_handle_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = at_handle_resp &rArr; at_handle_callback_cmd_resp &rArr; at_rm_node &rArr; at_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_resp_buf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_handle_callback_cmd_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
</UL>

<P><STRONG><a name="[17c]"></a>at_rm_node</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, at_main.o(i.at_rm_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = at_rm_node &rArr; at_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_timeout_nodes
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_handle_callback_cmd_resp
</UL>

<P><STRONG><a name="[188]"></a>at_rm_timeout_nodes</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, at_main.o(i.at_rm_timeout_nodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = at_rm_timeout_nodes &rArr; at_rm_node &rArr; at_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_node
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
</UL>

<P><STRONG><a name="[276]"></a>save_flag</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, upgrade_flag.o(i.save_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_write
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_upgrade_get_result
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_upgrade_init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set_recover_verify
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set_info
</UL>

<P><STRONG><a name="[66]"></a>local_calloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, package.o(i.local_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = local_calloc &rArr; pack_malloc &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_device)
</UL>
<P><STRONG><a name="[65]"></a>pack_get_block_size</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, package.o(i.pack_get_block_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pack_get_block_size &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_device)
</UL>
<P><STRONG><a name="[34e]"></a>pack_init_pack_device</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, package.o(i.pack_init_pack_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_init
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_init
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
</UL>

<P><STRONG><a name="[62]"></a>pack_read_software</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, package.o(i.pack_read_software))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pack_read_software &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_device)
</UL>
<P><STRONG><a name="[64]"></a>pack_set_flash_type</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, package.o(i.pack_set_flash_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pack_set_flash_type &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_device)
</UL>
<P><STRONG><a name="[67]"></a>pack_storage_write_software</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, package.o(i.pack_storage_write_software))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = pack_storage_write_software &rArr; pack_wr_write &rArr; pack_wr_entire_blocks &rArr; pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_head_len
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_checksum
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_update_data
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_pack_device)
</UL>
<P><STRONG><a name="[68]"></a>pack_storage_write_software_end</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, package.o(i.pack_storage_write_software_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = pack_storage_write_software_end &rArr; pack_wr_write_end &rArr; pack_wr_write_stored_data &rArr; pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write_end
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_destroy
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_destroy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_check
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_pack_device)
</UL>
<P><STRONG><a name="[63]"></a>pack_write_software</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, package.o(i.pack_write_software))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pack_write_software &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_device)
</UL>
<P><STRONG><a name="[343]"></a>pack_checksum_get_alg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, package_checksum.o(i.pack_checksum_get_alg))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_delete
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_check
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_restore_checksum
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init_head_data
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_update_data
</UL>

<P><STRONG><a name="[345]"></a>pack_checksum_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, package_checksum.o(i.pack_checksum_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pack_checksum_init &rArr; pack_sha256_rsa2048_init &rArr; pack_sha256_init &rArr; pack_sha256_reset &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_init
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_create
</UL>

<P><STRONG><a name="[346]"></a>pack_checksum_init_head_data</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, package_checksum.o(i.pack_checksum_init_head_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pack_checksum_init_head_data &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_head_info
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_get_alg
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_head_len
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_create
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_update_data
</UL>

<P><STRONG><a name="[34c]"></a>pack_checksum_restore_checksum</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, package_checksum.o(i.pack_checksum_restore_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pack_checksum_restore_checksum &rArr; pack_malloc &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_get_alg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_update_data
</UL>

<P><STRONG><a name="[6c]"></a>pack_sha256_check</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, package_checksum.o(i.pack_sha256_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pack_sha256_check &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package_checksum.o(i.pack_sha256_init)
</UL>
<P><STRONG><a name="[6d]"></a>pack_sha256_destroy</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, package_checksum.o(i.pack_sha256_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pack_sha256_destroy &rArr; mbedtls_sha256_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package_checksum.o(i.pack_sha256_init)
</UL>
<P><STRONG><a name="[6a]"></a>pack_sha256_reset</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, package_checksum.o(i.pack_sha256_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pack_sha256_reset &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package_checksum.o(i.pack_sha256_init)
</UL>
<P><STRONG><a name="[6e]"></a>pack_sha256_rsa2048_check</STRONG> (Thumb, 390 bytes, Stack size 88 bytes, package_checksum.o(i.pack_sha256_rsa2048_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 3464<LI>Call Chain = pack_sha256_rsa2048_check &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_key
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package_checksum.o(i.pack_sha256_rsa2048_init)
</UL>
<P><STRONG><a name="[6b]"></a>pack_sha256_update</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, package_checksum.o(i.pack_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pack_sha256_update &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package_checksum.o(i.pack_sha256_init)
</UL>
<P><STRONG><a name="[356]"></a>pack_head_get_checksum_attribute</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, package_head.o(i.pack_head_get_checksum_attribute))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_tlvs
</UL>

<P><STRONG><a name="[7d]"></a>pack_head_handle_bin_type_tlv</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, package_head.o(i.pack_head_handle_bin_type_tlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pack_head_handle_bin_type_tlv &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package_head.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>pack_head_handle_checksum_tlv</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, package_head.o(i.pack_head_handle_checksum_tlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pack_head_handle_checksum_tlv &rArr; pack_malloc &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package_head.o(.constdata)
</UL>
<P><STRONG><a name="[350]"></a>pack_head_is_done</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, package_head.o(i.pack_head_is_done))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_head_info
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_head_len
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_check
</UL>

<P><STRONG><a name="[355]"></a>pack_head_parse_tlvs</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, package_head.o(i.pack_head_parse_tlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pack_head_parse_tlvs &rArr; pack_checksum_create &rArr; pack_checksum_init_head_data &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_checksum_attribute
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_delete
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_create
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse
</UL>

<P><STRONG><a name="[361]"></a>pack_wr_begin_not_aligned</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, package_writer.o(i.pack_wr_begin_not_aligned))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = pack_wr_begin_not_aligned &rArr; pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_write_data
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write
</UL>

<P><STRONG><a name="[365]"></a>pack_wr_end_not_aligned_block</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, package_writer.o(i.pack_wr_end_not_aligned_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pack_wr_end_not_aligned_block &rArr; pack_malloc &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write
</UL>

<P><STRONG><a name="[366]"></a>pack_wr_entire_blocks</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, package_writer.o(i.pack_wr_entire_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = pack_wr_entire_blocks &rArr; pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_write_data
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write
</UL>

<P><STRONG><a name="[362]"></a>pack_write_data</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, package_writer.o(i.pack_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_enable_hwpatch
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write_stored_data
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_entire_blocks
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_begin_not_aligned
</UL>

<P><STRONG><a name="[15c]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[157]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[15f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[24]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[1e]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
